# UBO by hive/yard, points number of hives, threshold dotted bar
ggplot(ds_2022, aes(x=yard, y=UBO_assay_score, color=yard)) +
geom_boxplot(size=1) +
geom_text(aes(label=lab_ID), size=5) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") +# color pallets option = A-H
geom_hline(yintercept=.6, linetype="dashed",
color = "red", size=1)
# aggregate mite load by sampling event and yard
modelDF <- ds_2021 %>% # operate on the dataframe (ds) and assign to new object
group_by(lab_ID, yard) %>% # pick variables to group by
summarise(
varroa = mean(varroa_load_mites.100.bees, na.rm=T),
nosema = mean(nosema_load_spores.bee, na.rm=T),
hygienic = mean(FKB_percentile, na.rm=T),
honey = mean(honey_removed, na.rm=T),
weight = mean(october_weight, na.rm=T)
)
# clean data:
ds_2022_clean <- dplyr::select(ds_2022, varroa_load_mites.100.bees, nosema_load_spores.bee, FKB_percentile, UBO_assay_score, NormGenomeCopy, yard, lab_ID, sampling_event)
ds_2022_clean <- ds_2022_clean[!is.na(ds_2022_clean$lab_ID), ]
# aggregate mite load by sampling event and yard
modelDF <- ds_2022_clean %>% # operate on the dataframe (ds) and assign to new object
group_by(lab_ID, yard) %>% # pick variables to group by
summarise(
varroa = mean(varroa_load_mites.100.bees, na.rm=T),
varroaLast = varroa_load_mites.100.bees[sampling_event==9],
nosema = mean(nosema_load_spores.bee, na.rm=T),
fkb = mean(FKB_percentile, na.rm=T),
ubo = mean(UBO_assay_score, na.rm=T),
dwv = mean(NormGenomeCopy, na.rm=T),
)
# impute missing values:
imputedDF <- na_mean(modelDF[,3:8])
# merge ds back together with ID vars
imputedDF <- cbind(imputedDF, modelDF[,1:2])
# create function to rescale
range01 <- function(x){
(x-min(x))/(max(x)-min(x))
}
# call the function on each var
varroaScaled <- range01(imputedDF$varroa)
varroaLastScaled <- range01(imputedDF$varroaLast)
nosemaScaled <- range01(imputedDF$nosema)
fkbScaled <- range01(imputedDF$fkb)
uboScaled <- range01(imputedDF$ubo)
dwvScaled <- range01(imputedDF$dwv)
mn <- mean(sum(nosemaScaled), sum(fkbScaled), sum(varroaScaled), sum(varroaLastScaled), sum(uboScaled), sum(dwvScaled))
varroaScaled <- (varroaScaled/sum(varroaScaled))*mn
varroaLastScaled <- (varroaLastScaled/sum(varroaLastScaled))*mn
nosemaScaled <- (nosemaScaled/sum(nosemaScaled))*mn
fkbScaled <- (fkbScaled/sum(fkbScaled))*mn
uboScaled <- (uboScaled/sum(uboScaled))*mn
dwvScaled <- (dwvScaled/sum(dwvScaled))*mn
# create histogram data set of scaled vals
histogram <- data.frame(varroaScaled, varroaLastScaled, nosemaScaled, fkbScaled, uboScaled, dwvScaled)
histogramLong <- gather(histogram, condition, measurement, varroaScaled, varroaLastScaled, nosemaScaled, fkbScaled, uboScaled, dwvScaled)
# plot histogram of all scaled values
ggplot(histogramLong ,aes(x=measurement, fill=condition)) +
geom_histogram(alpha = 0.5, position = "identity") +
ylab("Frequency") + # y axis label
xlab("Parameter Value") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "right") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Parameter") # color pallets option = A-H
#c(varroa=12, nosema=5, hygienic=12, honey=10, weight=8, dwv=1)
# create fitness function
Fitness = (-3 * varroaScaled) +
(-3 * nosemaScaled) +
(6 * uboScaled) +
(-3 * dwvScaled) +
(3 * fkbScaled)
# rescale 0 to 1
imputedDF$Fitness <- range01(Fitness)
# print the sorted data set
orderedDF <- imputedDF[order(imputedDF$Fitness, decreasing = TRUE),]
# remove dead colonies
alive2022_IDs <- c(174,175,111,100,108,106,88,94,110,91,126,109,116,87,167,178,168,137,135,143,170,141,154,152,140,155,158,165,164,157,90,95,138)
alive2022 <- orderedDF[orderedDF$lab_ID %in% alive2022_IDs,]
# create new overwintering variable in ordered df
orderedDF$survival <- orderedDF$lab_ID %in% alive2022_IDs
orderedDF$treated <- ifelse(orderedDF$varroaLast >= 2, "treated", "untreated")
orderedDF$treated
# get treatment groups
tg <- dplyr::select(ds, lab_ID, treatment_grp)
# merge treatment groups to alive and full data sets
orderedDF <- unique(merge(x=orderedDF, y=tg, all.x = T))
aliveDF = unique(merge(alive2022, tg, all.x = T))
# are FHA more likley to have died than NPQ - NO
chisq.test(y=orderedDF$survival, x=orderedDF$treatment_grp)
# are treated colonies more likely to have lived than untreated -
chisq.test(y=orderedDF$survival, x=orderedDF$treated)
# set directory:
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
library(cowplot)
library(scales)
library(ggmosaic)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("UBO_Data_2022.csv", header = TRUE, stringsAsFactors = FALSE)
# UBO cont and binary
# create binary variable for UBO
ds$UBO_binary <- ifelse(ds$assay_score >= 0.6, 1, 0) #"hygienic", "nonhygienic")
mean(ds$UBO_binary, na.rm=T) # get percentage of hygienic UBO
# create anonymous beekeeper names
ds$anonBeek <- ifelse(ds$beekeeper == "Andrew Munkres", "beekeeper 1",
ifelse(ds$beekeeper == "Jack Rath", "beekeeper 2", "beekeeper 3"
))
# create nosema data frame and make long form
NosemaDS <- select(ds, beekeeper, yard, lab_ID, june_nosema_load_spores.bee, august_nosema_load_spores.bee, UBO_binary, assay_score)
NosemaDS_long <- gather(NosemaDS, time, nosmea_load, june_nosema_load_spores.bee:august_nosema_load_spores.bee, factor_key=TRUE)
NosemaDS_long$time <- ifelse(NosemaDS_long$time=="june_nosema_load_spores.bee", "June", "August")
NosemaDS_long$nosmea_load_log <- log10(NosemaDS_long$nosmea_load + 1)
NosemaDS_long$nosema_binary <- ifelse(NosemaDS_long$nosmea_load > 0, 1, 0)
NosemaDS_long$rescaledNosema <- NosemaDS_long$nosmea_load/sum(NosemaDS_long$nosmea_load, na.rm = TRUE)
NosemaDS_long$lab_ID <- as.character(NosemaDS_long$lab_ID)
# remove 0s
NosemaDS_long_no0 <- NosemaDS_long[!NosemaDS_long$nosema_binary==0,]
x=NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
x[x$UBO_binary==1,]
nosePrevSum <- NosemaDS_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosema_binary, na.rm=T), # mean
n = length(nosema_binary),
a = sum(nosema_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
# add factor data and make ubo a char
nosePrevSum <- nosePrevSum[!is.na(nosePrevSum$UBO_binary),]
nosePrevSum$time <- factor(nosePrevSum$time, levels = c("June", "August"))
nosePrevSum$UBO_Char <- ifelse(nosePrevSum$UBO_binary==1, "UBO Pos.", "UBO Neg.")
# plot prevalence
nosPrev <- ggplot(nosePrevSum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(8,8)) +
coord_cartesian(ylim = c(0, 1)) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.1, color=UBO_Char))+
labs(x="Sampling Month", y="Nosema Prevalence", color="UBO Status:") +
scale_color_manual(values = c("tomato3", "darkturquoise"))
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
# add factor data and make ubo a char
nosemaLoad_Sum <- nosemaLoad_Sum[!is.na(nosemaLoad_Sum$UBO_binary),]
nosemaLoad_Sum$time <- factor(nosemaLoad_Sum$time, levels = c("June", "August"))
nosemaLoad_Sum$UBO_Char <- ifelse(nosemaLoad_Sum$UBO_binary==1, "UBO High", "UBO Low")
contNos <-ggplot(nosemaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.2,.9)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Nosema Load (spores/bee)", color=" ") +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_color_manual(values = c("tomato3", "darkturquoise"))
contNos
# make a multi panel plot
plot_grid(nosPrev, contNos,
labels = "AUTO",
label_size = 20)
View(ds)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("UBO_Data_2022.csv", header = TRUE, stringsAsFactors = FALSE)
View(ds)
View(ds)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("UBO_Data_2022.csv", header = TRUE, stringsAsFactors = FALSE)
View(ds)
# UBO cont and binary
# create binary variable for UBO
ds$UBO_binary <- ifelse(ds$assay_score >= 0.6, 1, 0) #"hygienic", "nonhygienic")
mean(ds$UBO_binary, na.rm=T) # get percentage of hygienic UBO
# create anonymous beekeeper names
ds$anonBeek <- ifelse(ds$beekeeper == "Andrew Munkres", "beekeeper 1",
ifelse(ds$beekeeper == "Jack Rath", "beekeeper 2", "beekeeper 3"
))
# create nosema data frame and make long form
NosemaDS <- select(ds, beekeeper, yard, lab_ID, june_nosema_load_spores.bee, august_nosema_load_spores.bee, UBO_binary, assay_score)
NosemaDS_long <- gather(NosemaDS, time, nosmea_load, june_nosema_load_spores.bee:august_nosema_load_spores.bee, factor_key=TRUE)
NosemaDS_long$time <- ifelse(NosemaDS_long$time=="june_nosema_load_spores.bee", "June", "August")
NosemaDS_long$nosmea_load_log <- log10(NosemaDS_long$nosmea_load + 1)
NosemaDS_long$nosema_binary <- ifelse(NosemaDS_long$nosmea_load > 0, 1, 0)
NosemaDS_long$rescaledNosema <- NosemaDS_long$nosmea_load/sum(NosemaDS_long$nosmea_load, na.rm = TRUE)
NosemaDS_long$lab_ID <- as.character(NosemaDS_long$lab_ID)
# remove 0s
NosemaDS_long_no0 <- NosemaDS_long[!NosemaDS_long$nosema_binary==0,]
x=NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
x[x$UBO_binary==1,]
nosePrevSum <- NosemaDS_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosema_binary, na.rm=T), # mean
n = length(nosema_binary),
a = sum(nosema_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
nosePrevSum
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
nosemaLoad_Sum
NosemaDS_long_no0
NosemaDS_long_no0[NosemaDS_long_no0$time==August,]
NosemaDS_long_no0[NosemaDS_long_no0$time==August,]
NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
Aug <- NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
Aug$UBO_binary
kruskal.test(Aug$nosmea_load~Aug$UBO_binary)
Aug <- NosemaDS_long_no0[NosemaDS_long_no0$time=="June",]
kruskal.test(Aug$nosmea_load~Aug$UBO_binary)
Aug <- NosemaDS_long_no0[NosemaDS_long_no0$time=="Aug",]
kruskal.test(Aug$nosmea_load~Aug$UBO_binary)
Aug <- NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
kruskal.test(Aug$nosmea_load~Aug$UBO_binary)
kruskal.test(NosemaDS_long_no0$nosmea_load~NosemaDS_long_no0$UBO_binary)
summary(aov(NosemaDS_long_no0$nosmea_load~NosemaDS_long_no0$UBO_binary))
kruskal.test(NosemaDS_long_no0$nosmea_load~NosemaDS_long_no0$UBO_binary)
NosemaDS_long_no0
lmer(data=NosemaDS_long_no0, nosmea_load~UBO_binary * beekeeper + (1|yard))
x <- lmer(data=NosemaDS_long_no0, nosmea_load~UBO_binary * beekeeper + (1|yard))
Anova(x)
x <- lmer(data=NosemaDS_long_no0, nosmea_load~UBO_binary * beekeeper + (1|time))
Anova(x)
# figure as bar plots by beekeeper
x <- lmer(data=NosemaDS_long_no0, nosmea_load~UBO_binary * beekeeper + (1|time))
Anova(x)
ggplot(NosemaDS_long_no0, aes(x=UBO_binary, y=nosmea_load, color=beekeeper)) +
geom_boxplot(size=1) +
# add factor data and make ubo a char
nosemaLoad_Sum <- nosemaLoad_Sum[!is.na(nosemaLoad_Sum$UBO_binary),]
ggplot(NosemaDS_long_no0, aes(x=UBO_binary, y=nosmea_load, color=beekeeper)) +
geom_boxplot(size=1)
ggplot(NosemaDS_long_no0, aes(x=as.character(UBO_binary), y=nosmea_load, color=beekeeper)) +
geom_boxplot(size=1)
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, color=as.character(UBO_binary))) +
geom_boxplot(size=1)
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, color=UBO_binary)) +
geom_boxplot(size=1)
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, color=UBO_binary)) +
geom_bar(size=1)
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, color=UBO_binary)) +
geom_bar(stat="identity", position = "dodge")
NosemaDS_long_no0$ubo <- ifelse(NosemaDS_long_no0$UBO_binary==0, "low UBO", "High UBO")
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, color=ubo)) +
geom_bar(stat="identity", position = "dodge")
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, fill=ubo)) +
geom_bar(stat="identity", position = "dodge")
NosemaDS_long_no0$ubo
is.na(NosemaDS_long_no0$ubo)
NosemaDS_long_no0[!is.na(NosemaDS_long_no0$ubo),]
NosemaDS_long_no0 <- NosemaDS_long_no0[!is.na(NosemaDS_long_no0$ubo),]
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, fill=ubo)) +
geom_bar(stat="identity", position = "dodge")
# make plot
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, fill=ubo)) +
geom_bar(stat="identity", position = "dodge") +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Beekeeper") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3")) +
# add factor data and make ubo a char
nosemaLoad_Sum <- nosemaLoad_Sum[!is.na(nosemaLoad_Sum$UBO_binary),]
# make plot
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, fill=ubo)) +
geom_bar(stat="identity", position = "dodge") +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Beekeeper") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3"))
# make plot
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, fill=ubo)) +
geom_bar(stat="identity", position = "dodge") +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Beekeeper") + # x axis label
labs(fill = "") +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3"))
NosemaDS_long_no0
# make plot
ggplot(NosemaDS_long_no0, aes(x=beekeeper, y=nosmea_load, fill=ubo)) +
geom_bar(stat="identity", position = "dodge") +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Beekeeper") + # x axis label
labs(fill = "") +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3")) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("UBO_Data_2022.csv", header = TRUE, stringsAsFactors = FALSE)
# UBO cont and binary
# create binary variable for UBO
ds$UBO_binary <- ifelse(ds$assay_score >= 0.6, 1, 0) #"hygienic", "nonhygienic")
mean(ds$UBO_binary, na.rm=T) # get percentage of hygienic UBO
# create anonymous beekeeper names
ds$anonBeek <- ifelse(ds$beekeeper == "Andrew Munkres", "beekeeper 1",
ifelse(ds$beekeeper == "Jack Rath", "beekeeper 2", "beekeeper 3"
))
# create nosema data frame and make long form
NosemaDS <- select(ds, beekeeper, yard, lab_ID, june_nosema_load_spores.bee, august_nosema_load_spores.bee, UBO_binary, assay_score)
NosemaDS_long <- gather(NosemaDS, time, nosmea_load, june_nosema_load_spores.bee:august_nosema_load_spores.bee, factor_key=TRUE)
NosemaDS_long$time <- ifelse(NosemaDS_long$time=="june_nosema_load_spores.bee", "June", "August")
NosemaDS_long$nosmea_load_log <- log10(NosemaDS_long$nosmea_load + 1)
NosemaDS_long$nosema_binary <- ifelse(NosemaDS_long$nosmea_load > 0, 1, 0)
NosemaDS_long$rescaledNosema <- NosemaDS_long$nosmea_load/sum(NosemaDS_long$nosmea_load, na.rm = TRUE)
NosemaDS_long$lab_ID <- as.character(NosemaDS_long$lab_ID)
# remove 0s
NosemaDS_long_no0 <- NosemaDS_long[!NosemaDS_long$nosema_binary==0,]
x=NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
x[x$UBO_binary==1,]
nosePrevSum <- NosemaDS_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosema_binary, na.rm=T), # mean
n = length(nosema_binary),
a = sum(nosema_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
# add factor data and make ubo a char
nosePrevSum <- nosePrevSum[!is.na(nosePrevSum$UBO_binary),]
nosePrevSum$time <- factor(nosePrevSum$time, levels = c("June", "August"))
nosePrevSum$UBO_Char <- ifelse(nosePrevSum$UBO_binary==1, "UBO Pos.", "UBO Neg.")
# plot prevalence
nosPrev <- ggplot(nosePrevSum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(8,8)) +
coord_cartesian(ylim = c(0, 1)) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.1, color=UBO_Char))+
labs(x="Sampling Month", y="Nosema Prevalence", color="UBO Status:") +
scale_color_manual(values = c("tomato3", "darkturquoise"))
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
# figure as bar plots by beekeeper
x <- lmer(data=NosemaDS_long_no0, nosmea_load~UBO_binary * beekeeper + (1|time))
Anova(x)
# add ubo char and remove nas
NosemaDS_long_no0$ubo <- ifelse(NosemaDS_long_no0$UBO_binary==0, "low UBO", "High UBO")
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(beekeeper, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
nosemaLoad_Sum
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(beekeeper, ubo) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
ggplot(nosemaLoad_Sum, aes(x=beekeeper, y=nosmea_load, fill=ubo)) +
geom_bar(stat="identity", position = "dodge") +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Beekeeper") + # x axis label
labs(fill = "") +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3")) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))
ggplot(nosemaLoad_Sum, aes(x=beekeeper, y=mean, fill=ubo)) +
geom_bar(stat="identity", position = "dodge") +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Beekeeper") + # x axis label
labs(fill = "") +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3")) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))
ggplot(nosemaLoad_Sum, aes(x=beekeeper, y=mean, fill=ubo)) +
geom_bar(stat="identity", position = "dodge") +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Beekeeper") + # x axis label
labs(fill = "") +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3")) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=ubo))
View(ds)
NosemaDS_long_no0
View(VarroaDS_long_no0)
View(ds)
# create nosema data frame and make long form
NosemaDS <- select(ds, beekeeper, yard, lab_ID, june_nosema_load_spores.bee, august_nosema_load_spores.bee, UBO_binary, assay_score)
NosemaDS_long <- gather(NosemaDS, time, nosmea_load, june_nosema_load_spores.bee:august_nosema_load_spores.bee, factor_key=TRUE)
NosemaDS_long$time <- ifelse(NosemaDS_long$time=="june_nosema_load_spores.bee", "June", "August")
NosemaDS_long$nosmea_load_log <- log10(NosemaDS_long$nosmea_load + 1)
NosemaDS_long$nosema_binary <- ifelse(NosemaDS_long$nosmea_load > 0, 1, 0)
NosemaDS_long$rescaledNosema <- NosemaDS_long$nosmea_load/sum(NosemaDS_long$nosmea_load, na.rm = TRUE)
NosemaDS_long$lab_ID <- as.character(NosemaDS_long$lab_ID)
# remove 0s
NosemaDS_long_no0 <- NosemaDS_long[!NosemaDS_long$nosema_binary==0,]
x=NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
x[x$UBO_binary==1,]
nosePrevSum <- NosemaDS_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosema_binary, na.rm=T), # mean
n = length(nosema_binary),
a = sum(nosema_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
# add factor data and make ubo a char
nosePrevSum <- nosePrevSum[!is.na(nosePrevSum$UBO_binary),]
nosePrevSum$time <- factor(nosePrevSum$time, levels = c("June", "August"))
nosePrevSum$UBO_Char <- ifelse(nosePrevSum$UBO_binary==1, "UBO Pos.", "UBO Neg.")
# plot prevalence
nosPrev <- ggplot(nosePrevSum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(8,8)) +
coord_cartesian(ylim = c(0, 1)) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.1, color=UBO_Char))+
labs(x="Sampling Month", y="Nosema Prevalence", color="UBO Status:") +
scale_color_manual(values = c("tomato3", "darkturquoise"))
nosPrev
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
ggplot(nosemaLoad_Sum, aes(x=beekeeper, y=mean, fill=ubo)) +
geom_bar(stat="identity", position = "dodge") +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Beekeeper") + # x axis label
labs(fill = "") +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3")) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=ubo))
# add factor data and make ubo a char
nosemaLoad_Sum <- nosemaLoad_Sum[!is.na(nosemaLoad_Sum$UBO_binary),]
nosemaLoad_Sum$time <- factor(nosemaLoad_Sum$time, levels = c("June", "August"))
nosemaLoad_Sum$UBO_Char <- ifelse(nosemaLoad_Sum$UBO_binary==1, "UBO High", "UBO Low")
contNos <-ggplot(nosemaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.2,.9)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Nosema Load (spores/bee)", color=" ") +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_color_manual(values = c("tomato3", "darkturquoise"))
contNos
nosemaLoad_Sum
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary, beekeeper) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
nosemaLoad_Sum
View(ds)
View(NosemaDS_long)
