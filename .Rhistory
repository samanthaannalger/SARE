# Add regression lines
augBeek <- ggplot(ds, aes(x=assay_score, y=august_varroa_load_mites.100.bees,
color=as.character(anonBeek))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 4)) +
ylab(NULL) + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = c(5, 5)) + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3", "grey"), name="Beekeeper:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
augBeek
# august varroa load by beekeeper
cor.test(dsSplit$`Andrew Munkres`$assay_score, dsSplit$`Andrew Munkres`$august_varroa_load_mites.100.bees, method="spearman", exact = F)
cor.test(dsSplit$`Mike Palmer`$assay_score, dsSplit$`Mike Palmer`$august_varroa_load_mites.100.bees, method="spearman", exact = F)
cor.test(dsSplit$`Jack Rath`$assay_score, dsSplit$`Jack Rath`$august_varroa_load_mites.100.bees, method="spearman", exact = F)
## UBO June composite continuous
# Add regression lines
juneVar <- ggplot(ds, aes(x=assay_score, y=june_varroa_load_mites.100.bees)) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2, color = "darkturquoise") +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 4)) +
ylab("June Varroa Load (mites/100 bees)") + # y axis label
xlab(NULL) + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text("aes(label=lab_ID)", ) +
guides(color = guide_legend(override.aes = list(label = '')))
juneVar
# june varroa  by ubo
cor.test(ds$assay_score, ds$june_varroa_load_mites.100.bees, method="spearman", exact = F)
## UBO August composite continuous
# Add regression lines
augVar <- ggplot(ds, aes(x=assay_score, y=august_varroa_load_mites.100.bees)) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2, color = "darkturquoise") +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 4)) +
ylab("August Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
augVar
# june varroa  by ubo
cor.test(ds$assay_score, ds$august_varroa_load_mites.100.bees, method="spearman", exact = F)
# make a multi panel plot
plot_grid(juneVar, juneBeek, augVar, augBeek,
labels = "AUTO",
label_size = 17)
# Hygienic behavior by hive/yard, points number of hives, threshold dotted bar
ggplot(ds, aes(x=anonBeek, y=assay_score, color=beekeeper)) +
geom_boxplot(size=1) +
geom_point(size=3) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Beekeeper") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3", "grey")) +
geom_hline(yintercept=.6, linetype="dashed",
color = "black", size=1)
ds %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(beekeeper) %>% # pick variables to group by
summarise(
mean = mean(UBO_binary, na.rm=T), # mean
sum = sum(UBO_binary, na.rm=T),
N = length(UBO_binary), # sample size
)
## UBO by June varroa load binary
boxplot(ds$june_varroa_load_mites.100.bees~ds$UBO_binary)
summary(aov(ds$june_varroa_load_mites.100.bees~ds$UBO_binary))
## UBO by August Varroa loads binary
boxplot(ds$august_varroa_load_mites.100.bees~ds$UBO_binary)
summary(aov(ds$august_varroa_load_mites.100.bees~ds$UBO_binary))
# UBO by frames of brood
ggplot(ds, aes(x=frames_of_brood, y=assay_score,
color=as.character(beekeeper))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +
geom_point(size=2) +
ylab("UBO Assay Score)") + # y axis label
xlab("Colony Size") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
# log transform data
ds$log_june_varroa_load_mites.100.bees <- log10(ds$june_varroa_load_mites.100.bees + 0.0001)
ds$log_august_varroa_load_mites.100.bees <- log10(ds$august_varroa_load_mites.100.bees + 0.0001)
ds$log_june_nosema_load_spores.bee <- log10(ds$june_nosema_load_spores.bee + 1)
# split the data by beekeeper
dsSplit <- split(ds, ds$beekeeper)
## UBO by June Varroa loads continuous
# Add regression lines
juneBeek <- ggplot(ds, aes(x=assay_score, y=june_varroa_load_mites.100.bees,
color=as.character(anonBeek))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 4)) +
ylab(NULL) + # y axis label
xlab(NULL) + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = c(.8,.8)) + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3", "grey"), name="Beekeeper:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
juneBeek
# discrete analysis
dsNo0 <- ds[!ds$june_varroa_load_mites.100.bees==0,]
boxplot(dsNo0$UBO_binary, dsNo0$june_varroa_load_mites.100.bees)
x = aov(dsNo0$june_varroa_load_mites.100.bees~dsNo0$UBO_binary)
summary(x)
# june varroa for just andrew by ubo
cor.test(dsSplit$`Andrew Munkres`$assay_score, dsSplit$`Andrew Munkres`$june_varroa_load_mites.100.bees, method="spearman", exact = F)
cor.test(dsSplit$`Mike Palmer`$assay_score, dsSplit$`Mike Palmer`$june_varroa_load_mites.100.bees, method="spearman", exact = F)
cor.test(dsSplit$`Jack Rath`$assay_score, dsSplit$`Jack Rath`$june_varroa_load_mites.100.bees, method="spearman", exact = F)
## UBO by August Varroa loads continuous
# Add regression lines
augBeek <- ggplot(ds, aes(x=assay_score, y=august_varroa_load_mites.100.bees,
color=as.character(anonBeek))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 4)) +
ylab(NULL) + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = c(5, 5)) + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3", "grey"), name="Beekeeper:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
augBeek
# august varroa load by beekeeper
cor.test(dsSplit$`Andrew Munkres`$assay_score, dsSplit$`Andrew Munkres`$august_varroa_load_mites.100.bees, method="spearman", exact = F)
cor.test(dsSplit$`Mike Palmer`$assay_score, dsSplit$`Mike Palmer`$august_varroa_load_mites.100.bees, method="spearman", exact = F)
cor.test(dsSplit$`Jack Rath`$assay_score, dsSplit$`Jack Rath`$august_varroa_load_mites.100.bees, method="spearman", exact = F)
## UBO June composite continuous
# Add regression lines
juneVar <- ggplot(ds, aes(x=assay_score, y=june_varroa_load_mites.100.bees)) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2, color = "darkturquoise") +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 4)) +
ylab("June Varroa Load (mites/100 bees)") + # y axis label
xlab(NULL) + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text("aes(label=lab_ID)", ) +
guides(color = guide_legend(override.aes = list(label = '')))
juneVar
# june varroa  by ubo
cor.test(ds$assay_score, ds$june_varroa_load_mites.100.bees, method="spearman", exact = F)
## UBO August composite continuous
# Add regression lines
augVar <- ggplot(ds, aes(x=assay_score, y=august_varroa_load_mites.100.bees)) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2, color = "darkturquoise") +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 4)) +
ylab("August Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
augVar
# june varroa  by ubo
cor.test(ds$assay_score, ds$august_varroa_load_mites.100.bees, method="spearman", exact = F)
# make a multi panel plot
plot_grid(juneVar, juneBeek, augVar, augBeek,
labels = "AUTO",
label_size = 17)
# Hygienic behavior by hive/yard, points number of hives, threshold dotted bar
ggplot(ds, aes(x=anonBeek, y=assay_score, color=beekeeper)) +
geom_boxplot(size=1) +
geom_point(size=3) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Beekeeper") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3", "grey")) +
geom_hline(yintercept=.6, linetype="dashed",
color = "black", size=1)
ds %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(beekeeper) %>% # pick variables to group by
summarise(
mean = mean(UBO_binary, na.rm=T), # mean
sum = sum(UBO_binary, na.rm=T),
N = length(UBO_binary), # sample size
)
## UBO by June varroa load binary
boxplot(ds$june_varroa_load_mites.100.bees~ds$UBO_binary)
summary(aov(ds$june_varroa_load_mites.100.bees~ds$UBO_binary))
## UBO by August Varroa loads binary
boxplot(ds$august_varroa_load_mites.100.bees~ds$UBO_binary)
summary(aov(ds$august_varroa_load_mites.100.bees~ds$UBO_binary))
## UBO by June Nosema load continuous
# Add regression lines
ggplot(ds, aes(x=assay_score, y=june_nosema_load_spores.bee,
color=as.character(anonBeek))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2) +
geom_point(size=3) +
ylab("June Nosema Load (spores/bee)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3", "grey"), name="Beekeeper:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
cor.test(dsSplit$`Jack Rath`$assay_score, dsSplit$`Jack Rath`$june_nosema_load_spores.bee, method="spearman", exact = F)
cor.test(dsSplit$`Mike Palmer`$assay_score, dsSplit$`Mike Palmer`$june_nosema_load_spores.bee, method="spearman", exact = F)
cor.test(dsSplit$`Andrew Munkres`$assay_score, dsSplit$`Andrew Munkres`$june_nosema_load_spores.bee, method="spearman", exact = F)
## UBO by June Nosema load continuous wit a log transform
# Add regression lines
ggplot(ds, aes(x=assay_score, y=log_june_nosema_load_spores.bee,
color=as.character(anonBeek))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2) +
geom_point(size=3) +
ylab("June Nosema Load (spores/bee)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkturquoise", "tomato3", "grey"), name="Beekeeper:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
summary(lm(dsSplit$`Andrew Munkres`$log_june_nosema_load_spores.bee ~ dsSplit$`Andrew Munkres`$assay_score))
# remove 0s
dsNos_no0 <- ds[!ds$june_nosema_load_spores.bee==0,]
# remove NA
dsNos_no0 <- dsNos_no0[!is.na(dsNos_no0$june_nosema_load_spores.bee), ]
dsNos_no0 <- dsNos_no0[!is.na(dsNos_no0$assay_score), ]
dsNos_no0$rescaledNosema <- dsNos_no0$june_nosema_load_spores.bee/sum(dsNos_no0$june_nosema_load_spores.bee)
# june nosema by ubo
cor.test(ds$assay_score, ds$log_june_nosema_load_spores.bee, method="spearman", exact = F)
summary(lm(dsNos_no0$log_june_nosema_load_spores.bee ~ dsNos_no0$assay_score))
plot(dsNos_no0 $assay_score, dsNos_no0 $log_june_nosema_load_spores.bee)
## UBO by June Nosema load binary
boxplot(dsNos_no0$log_june_nosema_load_spores.bee~dsNos_no0$UBO_binary)
summary(aov(ds$log_june_nosema_load_spores.bee~ds$UBO_binary))
t.test(ds$june_nosema_load_spores.bee~ds$UBO_binary, alternative="greater")
kruskal.test(ds$june_nosema_load_spores.bee~ds$UBO_binary)
## UBO by August Nosema load continuous
# Add regression lines
ggplot(ds, aes(x=assay_score, y=august_nosema_load_spores.bee,
color=as.character(beekeeper))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +
geom_point(size=2) +
ylab("August Nosema Load (spores/bee)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
## UBO by June Nosema load binary
boxplot(ds$august_nosema_load_spores.bee~ds$UBO_binary)
summary(aov(ds$august_nosema_load_spores.bee~ds$UBO_binary))
# UBO by frames of brood
ggplot(ds, aes(x=frames_of_brood, y=assay_score,
color=as.character(beekeeper))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +
geom_point(size=2) +
ylab("UBO Assay Score)") + # y axis label
xlab("Colony Size") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
version
library(tidyverse)
library(dplyr)
library(ggplot2)
setwd("~/Documents/GitHub/SARE")
# Read in Tosi Datasets
tosi_lethal <- read.csv("pesticide_data_to_merge/Tosi_lethal.csv", header = TRUE, stringsAsFactors = FALSE)
tosi_sublethal <- read.csv("pesticide_data_to_merge/Tosi_sublethal.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in Description Dataset
pest_Desc <- read.csv("pesticide_data_to_merge/pestDesc.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in Cornell Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
# append dataframes
pest_df <- rbind(LS_df, SS_df)
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
str(pest_df)
# Read in Look-Up Table
look_up_ds <- read.csv("pestLookUp.csv", header = TRUE, stringsAsFactors = FALSE)
str(pest_df)
# Read in Look-Up Table
look_up_ds <- read.csv("pestLookUp.csv", header = TRUE, stringsAsFactors = FALSE)
################################################################################
# Cleaning LD50 Dataset -- Tosi Lethal
################################################################################
tosi_lethal
# Read in Description Dataset
pest_Desc <- read.csv("pesticide_data_to_merge/pestDesc.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in Cornell Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
pest_Desc
pest_Results
View(pest_Results)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
LS_df
SS_lookup
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
# append dataframes
pest_df <- rbind(LS_df, SS_df)
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
pest_df
View(pest_df)
################################################################################
# Cleaning LD50 Dataset -- Tosi Lethal
################################################################################
tosi_lethal
view(tosi_lethal)
# convert blank spaces to NA
tosi_lethal[tosi_lethal == " "] <- NA
tosi_lethal[tosi_lethal == ""] <- NA
# Read in Tosi Datasets
tosi_lethal <- read.csv("pesticide_data_to_merge/Tosi_lethal.csv", header = TRUE, stringsAsFactors = FALSE, skip =1)
tosi_lethal
tosi_lethal["X.6"][tosi_lethal["X.6"] == "Min (ug/bee)"]
# Read in Tosi Datasets
tosi_lethal <- read.csv("pesticide_data_to_merge/Tosi_lethal.csv", header = TRUE, stringsAsFactors = FALSE)
tosi_lethal["X.6"][tosi_lethal["X.6"] == "Min (ug/bee)"]
tosi_lethal["X.6"]
# Read in Tosi Datasets
tosi_lethal <- read.csv("pesticide_data_to_merge/Tosi_lethal.csv", header = TRUE, stringsAsFactors = FALSE, skip=1)
View(tosi_lethal)
tosi_lethal$Min..ug.bee.
name(tosi_lethal$Min..ug.bee.)
names(tosi_lethal$Min..ug.bee.)
# adjusting future column names
names(tosi_lethal$Min..ug.bee.) <- "oral_acute_LD50_min"
colnames(tosi_lethal$Min..ug.bee.)
names(tosi_lethal)
names(tosi_lethal)[names(tosi_lethal) == 'Min..ug.bee.'] <- 'oral_acute_LD50_min'
names(tosi_lethal)
tosi_lethal["X.13"][tosi_lethal["X.13"] == "LD50 1"] <- "oral_acute_LD50_1"
# Read in Tosi Datasets
tosi_lethal <- read.csv("pesticide_data_to_merge/Tosi_lethal.csv", header = TRUE, stringsAsFactors = FALSE) #skip=1
tosi_lethal["X.12"][tosi_lethal["X.12"] == "Min (ug/bee)"] <- "oral_acute_LD50_min"
tosi_lethal["X.13"][tosi_lethal["X.13"] == "LD50 1"] <- "oral_acute_LD50_1"
tosi_lethal["X.14"][tosi_lethal["X.14"] == "LD50 2"] <- "oral_acute_LD50_2"
tosi_lethal["X.15"][tosi_lethal["X.15"] == "LD50 3"] <- "oral_acute_LD50_3"
tosi_lethal["X.16"][tosi_lethal["X.16"] == "LD50 4"] <- "oral_acute_LD50_4"
tosi_lethal["X.17"][tosi_lethal["X.17"] == "LD50 5"] <- "oral_acute_LD50_5"
tosi_lethal["X.19"][tosi_lethal["X.19"] == "Min (ug/bee)"] <- "contact_acute_LD50_min"
tosi_lethal["X.26"][tosi_lethal["X.26"] == "LD50 1"] <- "contact_acute_LD50_1"
tosi_lethal["X.27"][tosi_lethal["X.27"] == "LD50 2"] <- "contact_acute_LD50_2"
tosi_lethal["X.28"][tosi_lethal["X.28"] == "LD50 3"] <- "contact_acute_LD50_3"
view(tosi_lethal)
# adjusting header of columns
names(tosi_lethal) <- tosi_lethal[1,]
tosi_lethal <- tosi_lethal[-1,]
# renaming columns
names(tosi_lethal)[names(tosi_lethal) == "Pesticide name"] <- "pesticide_name"
view(tosi_lethal)
# find min LD50 value from both oral acute and contact acute values
tosi_lethal$min_LD50_value <- min('oral_acute_LD50_min',
'oral_acute_LD50_1',
'oral_acute_LD50_2',
'oral_acute_LD50_3',
'oral_acute_LD50_4',
'oral_acute_LD50_5',
'contact_acute_Ld50_min',
'contact_acute_LD50_1',
'contact_acute_LD50_2',
'contact_acute_LD50_3')
min('oral_acute_LD50_min',
'oral_acute_LD50_1',
'oral_acute_LD50_2',
'oral_acute_LD50_3',
'oral_acute_LD50_4',
'oral_acute_LD50_5',
'contact_acute_Ld50_min',
'contact_acute_LD50_1',
'contact_acute_LD50_2',
'contact_acute_LD50_3')
min("a")
min("a", "b")
min("a", "b", "c")
install.packages("sos")
install.packages("Biobase")
x <- c(1,2,3)
y <- c(3,6,7)
data.frame(x,y)
df <- data.frame(x,y)
df %>% rowwise() %>% mutate(m = minn(c(x, y)))
df %>% rowwise() %>% mutate(m = min(c(x, y)))
# find min LD50 value from both oral acute and contact acute values
columns <- c('oral_acute_LD50_min', 'oral_acute_LD50_1',
'oral_acute_LD50_2',
'oral_acute_LD50_3',
'oral_acute_LD50_4',
'oral_acute_LD50_5',
'contact_acute_Ld50_min',
'contact_acute_LD50_1',
'contact_acute_LD50_2',
'contact_acute_LD50_3')
columns
tosi_lethal %>% rowwise() %>% mutate(min_LD50_value = min(columns))
columns <- c(oral_acute_LD50_min, oral_acute_LD50_1)
tosi_lethal %>% rowwise() %>% mutate(min_LD50_value = min(columns))
tosi_lethal
names(tosi_lethal)
tosi_lethal %>% rowwise() %>% mutate(min_LD50_value = min(columns))
View(tosi_lethal)
names(tosi_lethal)
# find min LD50 value from both oral acute and contact acute values
columns <- c('oral_acute_LD50_min', 'oral_acute_LD50_1',
'oral_acute_LD50_2',
'oral_acute_LD50_3',
'oral_acute_LD50_4',
'oral_acute_LD50_5',
'contact_acute_Ld50_min',
'contact_acute_LD50_1',
'contact_acute_LD50_2',
'contact_acute_LD50_3')
