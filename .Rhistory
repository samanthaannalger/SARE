facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(1, 0.5), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(0.5, 0.1), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(1.2, 0.1), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(1.1, 0.09), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(1.1, 0.1), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(1.2, 0.1), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(1.15, 0.1), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(1.17, 0.1), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
scatterplot3 <-
ggplot(data = superheroes,
mapping = aes(x = height_in,
y = weight)) +
geom_point(mapping = aes(shape = factor(publisher), color = factor(alignment))) +
geom_smooth(method = lm, color = "orange", se = F)+
scale_color_manual(name = c("Alignment"), values = c("good" = "#0476F2", "bad" = "#ED1D24", "neutral" = "Black"))+
labs(title = "Superheroes Weight vs Height",
x = "Height (inch)",
y = "Weight (lbs)")+
theme(legend.position = c(1.17, 0.07), legend.justification = c(2.5, 0), legend.direction = "vertical")+
scale_shape_discrete(name = c("Publisher")) +
coord_flip()+ #swaps the x and y axis
facet_wrap(facets = ~ publisher)+
guides(shape = "none")
scatterplot3
# Create the boxplot below
weight_alignment <- ggplot(data = superheroes,
mapping = aes(x = alignment, y = weight))+
labs(title = "Weight by Alignment")+
theme(plot.title = element_text(hjust = 0.5))+
theme_dark()+
geom_boxplot(fill = "orange3")
weight_alignment
# Create the boxplot below
weight_alignment <- ggplot(data = superheroes,
mapping = aes(x = alignment, y = weight))+
labs(title = "Superheroes' Weight by Alignment")+
theme(plot.title = element_text(hjust = 0.5))+
theme_dark()+
geom_boxplot(fill = "orange3")
weight_alignment
# NEW ANALYSIS!!! nosema load by group FHA vs NPQ (ANOVA)
mod4 <- aov(ds_2022$nosema_load_spores.bee ~ ds_2022$treatment_grp)
# set directory:
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
# install libraries
library(dplyr)
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("SARE_field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
virus <- read.csv("DWV_SARE2021.csv", header = TRUE, stringsAsFactors = FALSE)
# colonies that were removed
d <- ds[grepl(ds$comments, pattern = "removed from", fixed = TRUE),]
# make sure ids are unique
unique_to_remove <- unique(d$lab_ID)
# pull rows out that match these values
ds = filter(ds, !(lab_ID %in% unique_to_remove))
# this is where we split by year
ds_2021<- ds[ds$year == 2021, ]
ds_2022 <- ds[ds$year == 2022, ]
# for 2022 create a column that denotes whether a colony was treated for varroa mites
# check sampling event number for future analyses
ds_2022$varroaTreated <- ifelse(ds_2022$sampling_event == 9 & ds_2022$varroa_load_mites.100.bees >= 2, "treated", "not_treated")
# removing colonies that were treated
ds_2022 <- ds_2022[ds_2022$varroaTreated == "not_treated",]
# differences in freeze kill between selection processes
ggplot(ds_2022, aes(x=treatment_grp, y=percent_hygienic, color=treatment_grp, na.rm=T))+
geom_boxplot(size=1) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Treatment Group") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkseagreen4","darkorange"), name="Treatment Group:")# color pallets option = A-H
# pull rows out that match these values
ds = filter(ds, !(lab_ID %in% unique_to_remove))
# for 2022 create a column that denotes whether a colony was treated for varroa mites
# check sampling event number for future analyses
ds_2022$varroaTreated <- ifelse(ds_2022$sampling_event == 9 & ds_2022$varroa_load_mites.100.bees >= 2, "treated", "not_treated")
# removing colonies that were treated
ds_2022 <- ds_2022[ds_2022$varroaTreated == "not_treated",]
#### VARROA ANALYSIS
# aggregate mite load by sampling event and yard
pltV <- ds_2021 %>% # operate on the dataframe (ds) and assign to new object (V)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(varroa_load_mites.100.bees, na.rm=T), # mean
SD = sd(varroa_load_mites.100.bees, na.rm=T), # standard dev.
N = length(varroa_load_mites.100.bees), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(varroa_load_mites.100.bees, na.rm=T)
)
# Plot the time series data by group (yard in this case)
# the fist line of code calls in the data set and sets the variables
ggplot(data=pltV, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
# statistical analysis
# create the model
mod1 <- lmer(data=ds_2021, varroa_load_mites.100.bees ~ yard * sampling_event + (1|lab_ID))
#### NOSEMA ANALYSIS
# aggregate nosema load by sampling event and yard
pltN <- ds_2021 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(nosema_load_spores.bee, na.rm=T), # mean
SD = sd(nosema_load_spores.bee, na.rm=T), # standard dev.
N = length(nosema_load_spores.bee), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(nosema_load_spores.bee, na.rm=T)
)
# Plot the time series data by group (yard in this case)
# the fist line of code calls in the data set and sets the variables
ggplot(data=pltN, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
# statistical analysis
# create the model
mod1 <- lmer(data=ds, nosema_load_spores.bee ~ yard * sampling_event + (1|lab_ID))
# subset of dataset with rows that have a LN2 test
FKB_2021 <- ds_2021[!is.na(ds$FKB_percentile),]
# select only columns we need
FKB_2021 <- select(FKB_2021, lab_ID, FKB_percentile)
# change column names
colnames(FKB_2021) <- c("lab_ID", "percent_hygienic")
# merge hygienic behavior back in
ds_2021 <- merge(x=ds_2021, y=FKB_2021, all.x = TRUE)
## Plot HB by varroa load
# Add regression lines
ggplot(ds_2021, aes(x=percent_hygienic, y=varroa_load_mites.100.bees,
color=as.character(sampling_event))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +
geom_point(size=2) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
# new plot that removes time points as a factor
ggplot(ds_2021, aes(x=percent_hygienic, y=varroa_load_mites.100.bees)) +
#geom_point(size=0) +
geom_smooth(method=lm, se=TRUE, fullrange=TRUE) +
geom_point(size=2) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) # size of the text and label ticks
# HB by varroa load model
mod2 <- lm(data=ds, varroa_load_mites.100.bees ~ percent_hygienic + sampling_event )
# Hygienic behavior by hive/yard, points number of hives, threshold dotted bar
ggplot(ds_2021, aes(x=yard, y=percent_hygienic, color=yard)) +
geom_boxplot(size=1) +
geom_text(aes(label=lab_ID), size=5) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") +# color pallets option = A-H
geom_hline(yintercept=.8, linetype="dashed",
color = "red", size=1)
# set up the model
mod3 <- aov(data = ds_2021, percent_hygienic ~ yard)
# print table in increasing order based on some variable
ds_2021[order(ds_2021$percent_hygienic, decreasing = TRUE),]
##### HONEY YIELD ANALYSIS
# take only sampling event 4
dst4 <- ds_2021[ds_2021$sampling_event==4,]
# plot Honey yield by hive/yard
ggplot(dst4, aes(x=yard, y=honey_removed, color=yard)) +
geom_boxplot(size=1) +
geom_text(aes(label=lab_ID), size=5) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Honey Yield (lbs.)") + # y axis label
xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") # color pallets option = A-H
#### FRAMES OF BEES ANALYSIS
# take only sampling event 1
dst1 <- ds_2021[ds_2021$sampling_event==1,]
# plot Honey yield by hive/yard
ggplot(dst1, aes(x=yard, y=frame_of_bees, color=yard)) +
geom_boxplot(size=1) +
geom_text(aes(label=lab_ID), size=5) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Frames of Bees") + # y axis label
xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") # color pallets option = A-H
mean(ds_2021$FK_binary, na.rm=T) # get percentage of hygienic UBO
# subset of dataset with rows that have a LN2 test
FKB_2022 <- ds_2022[!is.na(ds_2022$FKB_percentile),]
UBO_2022 <- ds_2022[!is.na(ds_2022$UBO_assay_score),]
# select only columns we need
FKB_2022 <- select(FKB_2022, lab_ID, FKB_percentile)
UBO_2022 <- select(UBO_2022, lab_ID, UBO_assay_score)
# change column names
colnames(FKB_2022) <- c("lab_ID", "percent_hygienic")
colnames(UBO_2022) <- c("lab_ID", "UBO_assay_score_merged")
# merge hygienic behavior back in
ds_2022 <- merge(x=ds_2022, y=FKB_2022, all.x = TRUE)
ds_2022 <- merge(x=ds_2022, y=UBO_2022, all.x = TRUE)
## Plot freeze kill by varroa load (continuous/ all varroa sampling events)
# Add regression lines
ggplot(ds_2022, aes(x=percent_hygienic, y=varroa_load_mites.100.bees,
color=as.character(sampling_event))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +
geom_point(size=2) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("coral2", "grey", "deepskyblue2"), name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
## Plot freeze kill by varroa load (continuous/ only sampling event 9)
# Add regression lines
ggplot(August_Data, aes(x=percent_hygienic, y=varroa_load_mites.100.bees,
color=as.character(sampling_event))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +
geom_point(size=2) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
ggtitle("FKB Assay Percent by Varroa Load") +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("deepskyblue2"), name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
# new plot that removes time points as a factor
ggplot(ds_2022, aes(x=percent_hygienic, y=varroa_load_mites.100.bees)) +
#geom_point(size=0) +
geom_smooth(method=lm, se=TRUE, fullrange=TRUE) +
geom_point(size=2) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
ggtitle("FKB Assay Percent by Varroa Load (composite)") +
theme_minimal(base_size = 17) # size of the text and label ticks
# create binary variable for Freeze Kill
ds_2022$FK_binary <- ifelse(ds_2022$percent_hygienic >= 0.95, "hygienic", "non-hygienic")
# create binary variable for UBO
ds_2022$UBO_binary <- ifelse(ds_2022$UBO_assay_score >= 0.60, "hygienic", "non-hygienic") #"hygienic", "nonhygienic")
# create binary variable for UBO for merged UBO dataset
ds_2022$UBO_binary_merged <- ifelse(ds_2022$UBO_assay_score_merged >= 0.60, "hygienic", "non-hygienic") #"hygienic", "nonhygienic")
# differences in freeze kill between selection processes
ggplot(ds_2022, aes(x=treatment_grp, y=percent_hygienic, color=treatment_grp, na.rm=T))+
geom_boxplot(size=1) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Treatment Group") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkseagreen4","darkorange"), name="Treatment Group:")# color pallets option = A-H
# differences in freeze kill between selction processes
ggplot(ds_2022, aes(x=treatment_grp, y=UBO_assay_score, color=treatment_grp)) +
geom_boxplot(size=1) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Treatment Group") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkseagreen4","darkorange"), name="Treatment Group:")# color pallets option = A-H
# varroa load by UBO Binary
ggplot(ds_2022 %>% filter(!is.na(UBO_binary)), aes(x=UBO_binary, y=varroa_load_mites.100.bees, color=UBO_binary))+
geom_boxplot(size=1) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("UBO Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkgrey","darkgreen"), name="Behavior:")# color pallets option = A-H
ggplot(ds_2022, aes(x=percent_hygienic, y=nosema_load_spores.bee,
color=as.character(sampling_event))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +
geom_point(size=2) +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
# differences in varroa load between selction processes
ggplot(ds_2022, aes(x=treatment_grp, y=varroa_load_mites.100.bees, color=treatment_grp)) +
geom_boxplot(size=1) +
ylab("Varroa Load") + # y axis label
xlab("Treatment Group") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkseagreen4","darkorange"), name="Treatment Group:")
library(tidyverse)
library(dplyr)
library(ggplot2)
setwd("~/Documents/GitHub/SARE")
# Read in Tosi Datasets
tosi_lethal <- read.csv("pesticide_data_to_merge/Tosi_lethal.csv", header = TRUE, stringsAsFactors = FALSE, skip = 1)
tosi_sublethal <- read.csv("pesticide_data_to_merge/Tosi_sublethal.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in Description Dataset
pest_Desc <- read.csv("pesticide_data_to_merge/pestDesc.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in Cornell Results Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# Read in Cornell Results Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
#######################################################
# LIMIT FINDER FUNCTION
#######################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
df[loqVals$row[i], loqVals$col[i]] <- results[i]
