import platform
import platform
# make sure python 3.9 is loaded
print(platform.python_version())
from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align
from spacetime.scale.rasterTrim import raster_trim
from spacetime.objects.fileObject import file_object
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.operations.time import cube_time, return_time, scale_time, select_time
from spacetime.operations.cubeToDataframe import cube_to_dataframe
library(tidyverse)
library(stringr)
library(raster)
months <- c(paste0("0",seq(1,9)),10,11,12)
years <- seq(1981,1995)
precip <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/pr/CHELSA_pr_",
rep(months,30),"_",rep(years,each = 12),"_V.2.1.tif"))
tmin <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmin/CHELSA_tasmin_",
rep(months,15),"_",rep(years,each = 12),"_V.2.1.tif"))
tmax <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmax/CHELSA_tasmax_",
rep(months,15),"_",rep(years,each = 12),"_V.2.1.tif"))
txt_file <- c(precip, tmin, tmax)
txt_file
# raster I use to define cropping extent
ref_extent <- raster("D:/Climate/CHELSA2/bio1_1981-2010_V.2.1.tif")
# raster I use to define cropping extent
ref_extent <- raster("/Users/pburnham/Documents/geospatialData/Carya_ovata/Carya_ovata_sim_disc_10km.tif")
# raster I use to define cropping extent
ref_extent <- raster("/Users/pburnham/Documents/geospatialData/Carya_ovata/Carya_ovata_sim_disc_10km.tif")
plot(ref_extent)
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("D:/Climate/CHELSA_BIOCLIM+/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
z
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
print(name)
dest_file <- paste("D:/Climate/CHELSA_BIOCLIM+/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
}
for(f in c(1:length(txt_file))){
print(f)
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
getOption('timeout')
options(timeout=100)
getOption('timeout')
for(f in c(1:length(txt_file))){
print(f)
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
options(timeout=100)
txt_file
# set directory:
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
library(cowplot)
library(scales)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("UBO_Data_2022.csv", header = TRUE, stringsAsFactors = FALSE)
# UBO cont and binary
# create binary variable for UBO
ds$UBO_binary <- ifelse(ds$assay_score >= 0.6, 1, 0) #"hygienic", "nonhygienic")
mean(ds$UBO_binary, na.rm=T) # get percentage of hygienic UBO
# create anonymous beekeeper names
ds$anonBeek <- ifelse(ds$beekeeper == "Andrew Munkres", "beekeeper 1",
ifelse(ds$beekeeper == "Jack Rath", "beekeeper 2", "beekeeper 3"
))
# create nosema data frame and make long form
NosemaDS <- select(ds, beekeeper, yard, lab_ID, june_nosema_load_spores.bee, august_nosema_load_spores.bee, UBO_binary, assay_score)
NosemaDS_long <- gather(NosemaDS, time, nosmea_load, june_nosema_load_spores.bee:august_nosema_load_spores.bee, factor_key=TRUE)
NosemaDS_long$time <- ifelse(NosemaDS_long$time=="june_nosema_load_spores.bee", "June", "August")
NosemaDS_long$nosmea_load_log <- log10(NosemaDS_long$nosmea_load + 1)
NosemaDS_long$nosema_binary <- ifelse(NosemaDS_long$nosmea_load > 0, 1, 0)
NosemaDS_long$rescaledNosema <- NosemaDS_long$nosmea_load/sum(NosemaDS_long$nosmea_load, na.rm = TRUE)
NosemaDS_long$lab_ID <- as.character(NosemaDS_long$lab_ID)
# remove 0s
NosemaDS_long_no0 <- NosemaDS_long[!NosemaDS_long$nosema_binary==0,]
x=NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
x[x$UBO_binary==1,]
nosePrevSum <- NosemaDS_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosema_binary, na.rm=T), # mean
n = length(nosema_binary),
a = sum(nosema_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
# add factor data and make ubo a char
nosePrevSum <- nosePrevSum[!is.na(nosePrevSum$UBO_binary),]
nosePrevSum$time <- factor(nosePrevSum$time, levels = c("June", "August"))
nosePrevSum$UBO_Char <- ifelse(nosePrevSum$UBO_binary==1, "UBO Pos.", "UBO Neg.")
# plot prevalence
nosPrev <- ggplot(nosePrevSum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(8,8)) +
coord_cartesian(ylim = c(0, 1)) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.1, color=UBO_Char))+
labs(x="Sampling Month", y="Nosema Prevalence", color="UBO Status:") +
scale_color_manual(values = c("tomato3", "darkturquoise"))
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
# add factor data and make ubo a char
nosemaLoad_Sum <- nosemaLoad_Sum[!is.na(nosemaLoad_Sum$UBO_binary),]
nosemaLoad_Sum$time <- factor(nosemaLoad_Sum$time, levels = c("June", "August"))
nosemaLoad_Sum$UBO_Char <- ifelse(nosemaLoad_Sum$UBO_binary==1, "UBO Pos.", "UBO Neg.")
contNos <-ggplot(nosemaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.3,.85)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Nosema Load (spores/bee)", color="Pathogen:") +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_color_manual(values = c("tomato3", "darkturquoise"))
# add factor data and make ubo a char
nosemaLoad_Sum <- nosemaLoad_Sum[!is.na(nosemaLoad_Sum$UBO_binary),]
nosemaLoad_Sum$time <- factor(nosemaLoad_Sum$time, levels = c("June", "August"))
nosemaLoad_Sum$UBO_Char <- ifelse(nosemaLoad_Sum$UBO_binary==1, "UBO High.", "UBO Low.")
contNos <-ggplot(nosemaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.3,.85)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Nosema Load (spores/bee)", color="Pathogen:") +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_color_manual(values = c("tomato3", "darkturquoise"))
contNos
contNos <-ggplot(nosemaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.3,.85)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Nosema Load (spores/bee)", color=" ") +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_color_manual(values = c("tomato3", "darkturquoise"))
contNos
contNos <-ggplot(nosemaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.2,.9)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Nosema Load (spores/bee)", color=" ") +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_color_manual(values = c("tomato3", "darkturquoise"))
contNos
# add factor data and make ubo a char
nosemaLoad_Sum <- nosemaLoad_Sum[!is.na(nosemaLoad_Sum$UBO_binary),]
nosemaLoad_Sum$time <- factor(nosemaLoad_Sum$time, levels = c("June", "August"))
nosemaLoad_Sum$UBO_Char <- ifelse(nosemaLoad_Sum$UBO_binary==1, "UBO High", "UBO Low")
contNos <-ggplot(nosemaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.2,.9)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Nosema Load (spores/bee)", color=" ") +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_color_manual(values = c("tomato3", "darkturquoise"))
contNos
