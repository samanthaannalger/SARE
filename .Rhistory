import platform
import platform
# make sure python 3.7 is laoded
setwd("~/Documents/GitHub/Theme3_Burnham_Private/Theme3_PythonProjects/barWebApp")
data <- read.csv("time_series_data.csv", header=TRUE, colClasses=c(fips="character"))
table(data$variable)
data <- read.csv("climate_data.csv", header=TRUE, colClasses=c(fips="character"))
table(data$variable)
data <- read.csv("rOutput1.csv", header=TRUE, colClasses=c(fips="character"))
head(data)
data <- read.csv("rOutput1.csv", header=TRUE, colClasses=c(Counties="character"))
head(data)
data <- read.csv("climate_data.csv", header=TRUE, colClasses=c(fips="character"))
data <- read.csv("time_series_data.csv", header=TRUE, colClasses=c(fips="character"))
head(data)
fipsDS <- select(data, variable, fips, year)
library(dplyr)
library(tidyr)
fipsDS <- select(data, variable, fips, year)
fipsDS
fipsDS <- unique(select(data, fips))
fipsDS
rep(fipsDS, 69)
Counties <- c(rep(fipsDS, 69))
table(Counties)
Counties <- rep(fipsDS, 69)
Counties <- as.vector(rep(fipsDS, 69))
View(Counties)
fipsDS <- as.vector(unique(select(data, fips)))
str(fipsDS)
fipsDS <- as.character(unique(select(data, fips)))
str(fipsDS)
fipsDS <- (unique(select(data, fips)))
Counties <- as.character(rep(fipsDS, 69))
length(Counties)
fipsDS <- as.numeric(unique(select(data, fips)))
fipsDS <- as.character(unique(select(data, fips)))
str(fipsDS)
length(fipsDS)
fipsDS <- data$fips
fipsDS <- unique(data$fips)
Counties <- rep(Counties, 69)
Counties <- unique(data$fips)
Counties <- as.numeric(unique(data$fips))
Counties <- unique(data$fips)
Counties <- as.character(rep(Counties, 69))
table(Counties)
Counties
# create time
time = rep(1950:2019, each = 3146)
table(time)
# create time
time <-  rep(1950:2019, each = 3146)
table(time)
length(unique(time))
# create counties
Counties <- unique(data$fips)
Counties <- as.character(rep(Counties, 70))
# create time
time <-  rep(1950:2019, each = 3146)
arf <- runif(n=220220, min=0, max=10)
mat <- runif(n=220220, min=0, max=5)
dff <- runif(n=220220, min=0, max=20)
dfTemp <- data.frame(Counties, time, arf, mat, dff)
write.csv(dfTemp, "synthDF.csv")
data <- read.csv("climate_annual.csv", header=TRUE, colClasses=c(fips="character"))
table(data$fips)
if (nchar(data$fips) < 5){
paste0("0", data$fips)
}
nchar(data$fips)
if (nchar(data$fips) < 5){
print("do something")
}
any(nchar(data$fips) < 5)
data$numChars <- nchar(data$fips)
if (data$numChars < 5){
print("do something")
}
for( i in length(data$numChars)){
if (data$numChars(i) < 5){
print("do something")
}
}
for( i in length(data$numChars)){
if (data$numChars[i] < 5){
print("do something")
}
}
for( i in 1:length(data$numChars)){
if (data$numChars[i] < 5){
print("do something")
}
}
for( i in 1:length(data$numChars)){
if (data$numChars[i] < 5){
data$data$fips[i] <- paste0("0",data$fips[i])
}
}
length(data$fips)
for( i in 1:length(data$numChars)){
if (data$numChars[i] < 5){
data$data$fips[i] <- paste0("0",data$fips[i])
print(i)
}
}
any(nchar(data$fips) < 5)
table(data$fips)
paste0("0", "1011")
for( i in 1:length(data$numChars)){
if (data$numChars[i] < 5){
data$fips[i] <- paste0("0",data$fips[i])
print(i)
}
}
table(data$fips)
any(nchar(data$fips) < 5)
data$data < NULL
data <- read.csv("climate_annual.csv", header=TRUE, colClasses=c(fips="character"))
data$numChars <- nchar(data$fips)
for( i in 1:length(data$numChars)){
if (data$numChars[i] < 5){
data$fips[i] <- paste0("0",data$fips[i])
print(i)
}
}
data$
table(data$fips)
data$
table(data$fips)
wqerfqwerf
data$
table(data$fips)
data$fips
any(nchar(data$fips) < 5)
data$
table(data$fips)
data$numChars < NULL
data$numChars
table(data$fips)
subset(data, select=-c(numChars))
df <- subset(data, select=-c(numChars))
table(df$fips)
write.csv(df, "annual_climateDS.csv")
# set directory:
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
# load in data
ds <- read.csv("SARE_Field_database.csv", header = TRUE, stringsAsFactors = FALSE)
# colonies that were removed
d <- ds[grepl(ds$comments, pattern = "removed from", fixed = TRUE),]
# make sure ids are unique
unique_to_remove <- unique(d$lab_ID)
# pull rows out that match these values
ds = filter(ds, !(lab_ID %in% unique_to_remove))
#### VARROA ANALYSIS
# aggregate mite load by sampling event and yard
pltV <- ds %>% # operate on the dataframe (ds) and assign to new object (V)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(varroa_load_mites.100.bees, na.rm=T), # mean
SD = sd(varroa_load_mites.100.bees, na.rm=T), # standard dev.
N = length(varroa_load_mites.100.bees), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(varroa_load_mites.100.bees, na.rm=T)
)
# Plot the time series data by group (yard in this case)
# the fist line of code calls in the data set and sets the variables
ggplot(data=pltV, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
# statistical analysis
# create the model
mod1 <- lmer(data=ds, varroa_load_mites.100.bees ~ yard * sampling_event + (1|lab_ID))
summary(mod1) # look at the summary of the model
Anova(mod1) # check significance
#### NOSEMA ANALYSIS
# aggregate nosema load by sampling event and yard
pltN <- ds %>% # operate on the dataframe (ds) and assign to new object (pltN)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(nosema_load_spores.bee, na.rm=T), # mean
SD = sd(nosema_load_spores.bee, na.rm=T), # standard dev.
N = length(nosema_load_spores.bee), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(nosema_load_spores.bee, na.rm=T)
)
# Plot the time series data by group (yard in this case)
# the fist line of code calls in the data set and sets the variables
ggplot(data=pltN, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
# statistical analysis
# create the model
mod1 <- lmer(data=ds, nosema_load_spores.bee ~ yard * sampling_event + (1|lab_ID))
summary(mod1) # look at the summary of the model
Anova(mod1) # check significance
# subset of dataset with rows that have a LN2 test
testedDS <- ds[!is.na(ds$HB_percentile),]
# select only columns we need
testedDS <- select(testedDS, lab_ID, HB_percentile)
# change column names
colnames(testedDS) <- c("lab_ID", "percent_hygienic")
# merge hygieneic behavior back in
ds=merge(x=ds, y=testedDS, all.x = TRUE)
# Add regression lines
ggplot(ds, aes(x=percent_hygienic, y=varroa_load_mites.100.bees,
color=as.character(sampling_event))) +
#geom_point(size=0) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +
geom_point(size=2) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Time Point:") + # color pallets option = A-H
#geom_text(aes(label=lab_ID)) +
guides(color = guide_legend(override.aes = list(label = '')))
# new plot that removes time points as a factor
ggplot(ds, aes(x=percent_hygienic, y=varroa_load_mites.100.bees)) +
#geom_point(size=0) +
geom_smooth(method=lm, se=TRUE, fullrange=TRUE) +
geom_point(size=2) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Percent Hygienic Behavior") + # x axis label
theme_minimal(base_size = 17) # size of the text and label ticks
# HB by varroa load model
mod2 <- lm(data=ds, varroa_load_mites.100.bees~percent_hygienic  sampling_event )
summary(mod2)
Anova(mod2)
# take only sampling event 2
dst2 <- ds[ds$sampling_event==2,]
# Hygienic behavior by hive/yard, points number of hives, threshold dotted bar
ggplot(dst2, aes(x=yard, y=percent_hygienic, color=yard)) +
geom_boxplot(size=1) +
geom_text(aes(label=lab_ID), size=5) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") +# color pallets option = A-H
geom_hline(yintercept=.8, linetype="dashed",
color = "red", size=1)
# set up the model
mod3 <- aov(data = dst2, percent_hygienic ~ yard)
summary(mod3)
# print table in increasing order based on some variable
dst2[order(dst2$percent_hygienic, decreasing = TRUE),]
##### HONEY YIELD ANALYSIS
# take only sampling event 4
dst4 <- ds[ds$sampling_event==4,]
# plot Honey yield by hive/yard
ggplot(dst4, aes(x=yard, y=honey_removed, color=yard)) +
geom_boxplot(size=1) +
geom_text(aes(label=lab_ID), size=5) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Honey Yield (lbs.)") + # y axis label
xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") # color pallets option = A-H
#### FRAMES OF BEES ANALYSIS
# take only sampling event 1
dst1 <- ds[ds$sampling_event==1,]
# plot Honey yield by hive/yard
ggplot(dst1, aes(x=yard, y=frame_of_bees, color=yard)) +
geom_boxplot(size=1) +
geom_text(aes(label=lab_ID), size=5) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Frames of Bees") + # y axis label
xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") # color pallets option = A-H
# aggregate mite load by sampling event and yard
modelDF <- ds %>% # operate on the dataframe (ds) and assign to new object
group_by(lab_ID, yard) %>% # pick variables to group by
summarise(
varroa = mean(varroa_load_mites.100.bees, na.rm=T),
nosema = mean(nosema_load_spores.bee, na.rm=T),
hygienic = mean(HB_percentile, na.rm=T),
honey = mean(honey_removed, na.rm=T),
weight = mean(october_weight, na.rm=T)
)
# impute missing values:
imputedDF <- na_mean(modelDF[,3:7])
# merge ds back together with ID vars
imputedDF <- cbind(imputedDF, modelDF[,1:2])
# create function to rescale
range01 <- function(x){
(x-min(x))/(max(x)-min(x))
}
# call the function on each var
varroaScaled <- range01(imputedDF$varroa)
nosemaScaled <- range01(imputedDF$nosema)
hygienicScaled <- range01(imputedDF$hygienic)
honeyScaled <- range01(imputedDF$honey)
weightScaled <- range01(imputedDF$weight)
# create histogram data set of scaled vals
histogram <- data.frame(varroaScaled, nosemaScaled, hygienicScaled, honeyScaled, weightScaled)
histogramLong <- gather(histogram, condition, measurement, varroaScaled, nosemaScaled, hygienicScaled, honeyScaled, weightScaled)
# plot histogram of all scaled values
ggplot(histogramLong ,aes(x=measurement, fill=condition)) +
geom_histogram(alpha = 0.5, position = "identity") +
ylab("Frequency") + # y axis label
xlab("Parameter Value") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "right") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Parameter") # color pallets option = A-H
# create fitness function
Fitness = (-1 * varroaScaled) +
(-1 * nosemaScaled) +
(1 * hygienicScaled) +
(1 * honeyScaled) +
(1 * weightScaled)
# rescale 0 to 1
imputedDF$Fitness <- range01(Fitness)
# print the sorted data set
imputedDF[order(imputedDF$Fitness, decreasing = TRUE),]
# explicit print command:
print(imputedDF)
plot(sort(imputedDF$Fitness))
hist(imputedDF$Fitness, breaks = 10)
# print the sorted data set
imputedDF[order(imputedDF$Fitness, decreasing = TRUE),]
