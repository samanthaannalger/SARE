xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") +# color pallets option = A-H
geom_hline(yintercept=.95, linetype="dashed",
color = "red", size=1)
# set up the model
mod3 <- aov(data = ds_2022, percent_hygienic ~ yard)
summary(mod3)
# print table in increasing order based on some variable
ds_2022[order(ds_2022$percent_hygienic, decreasing = TRUE),]
# UBO by hive/yard, points number of hives, threshold dotted bar
ggplot(ds_2022, aes(x=yard, y=UBO_assay_score, color=yard)) +
geom_boxplot(size=1) +
geom_text(aes(label=lab_ID), size=5) +
guides(color = guide_legend(override.aes = list(label = ''))) +
ylab("Percent Hygienic Behavior") + # y axis label
xlab("Bee Yard") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H") +# color pallets option = A-H
geom_hline(yintercept=.6, linetype="dashed",
color = "red", size=1)
# aggregate mite load by sampling event and yard
modelDF <- ds_2021 %>% # operate on the dataframe (ds) and assign to new object
group_by(lab_ID, yard) %>% # pick variables to group by
summarise(
varroa = mean(varroa_load_mites.100.bees, na.rm=T),
nosema = mean(nosema_load_spores.bee, na.rm=T),
hygienic = mean(FKB_percentile, na.rm=T),
honey = mean(honey_removed, na.rm=T),
weight = mean(october_weight, na.rm=T)
)
modelDF <- merge(modelDF, virus, by = c("lab_ID"))
# impute missing values:
imputedDF <- na_mean(modelDF[,3:8])
# merge ds back together with ID vars
imputedDF <- cbind(imputedDF, modelDF[,1:2])
# create function to rescale
range01 <- function(x){
(x-min(x))/(max(x)-min(x))
}
# call the function on each var
varroaScaled <- range01(imputedDF$varroa)
nosemaScaled <- range01(imputedDF$nosema)
hygienicScaled <- range01(imputedDF$hygienic)
honeyScaled <- range01(imputedDF$honey)
weightScaled <- range01(imputedDF$weight)
dwvScaled <- range01(imputedDF$NormGenomeCopy)
mn <- mean(sum(nosemaScaled), sum(weightScaled), sum(varroaScaled), sum(honeyScaled), sum(hygienicScaled), sum(dwvScaled))
varroaScaled <- (varroaScaled/sum(varroaScaled))*mn
nosemaScaled <- (nosemaScaled/sum(nosemaScaled))*mn
hygienicScaled <- (hygienicScaled/sum(hygienicScaled))*mn
honeyScaled <- (honeyScaled/sum(honeyScaled))*mn
weightScaled <- (weightScaled/sum(weightScaled))*mn
dwvScaled <- (dwvScaled/sum(dwvScaled))*mn
# create histogram data set of scaled vals
histogram <- data.frame(varroaScaled, nosemaScaled, hygienicScaled, honeyScaled, weightScaled, dwvScaled)
histogramLong <- gather(histogram, condition, measurement, varroaScaled, nosemaScaled, hygienicScaled, honeyScaled, weightScaled, dwvScaled)
# plot histogram of all scaled values
ggplot(histogramLong ,aes(x=measurement, fill=condition)) +
geom_histogram(alpha = 0.5, position = "identity") +
ylab("Frequency") + # y axis label
xlab("Parameter Value") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "right") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Parameter") # color pallets option = A-H
#c(varroa=12, nosema=5, hygienic=12, honey=10, weight=8, dwv=1)
# create fitness function
Fitness = (-3 * varroaScaled) +
(-3 * nosemaScaled) +
(3 * hygienicScaled) +
(-3 * dwvScaled) +
(3 * honeyScaled) +
(3 * weightScaled)
# rescale 0 to 1
imputedDF$Fitness <- range01(Fitness)
death <- select(ds[ds$sampling_event==6,], overwinter_success, lab_ID)
imputedDF <- merge(imputedDF, death)
tp6 <- read.csv("TP6Data.csv")
imputedDF <- merge(imputedDF, tp6)
# print the sorted data set
orderedDF <- imputedDF[order(imputedDF$Fitness, decreasing = TRUE),]
orderedDF
pcaDS <- orderedDF[!orderedDF$lab_ID==34,]
pcaDS <- select(pcaDS, overwinter_success, varroa, nosema, hygienic, honey, weight, NormGenomeCopy)
pcaDS$overwinter_success
mod <- aov(pcaDS$honey~pcaDS$overwinter_success)
summary(mod)
boxplot(pcaDS$honey~pcaDS$overwinter_success)
set.seed(123)
ind <- sample(2, nrow(pcaDS),
replace = TRUE,
prob = c(0.6, 0.4))
training <- pcaDS[ind==1,]
testing <- pcaDS[ind==2,]
linear <- lda(overwinter_success~., training)
linear$scaling*1000000000000
p1 <- predict(linear, training)$class
tab <- table(Predicted = p1, Actual = training$overwinter_success)
tab
sum(diag(tab))/sum(tab)
p2 <- predict(linear, testing)$class
tab1 <- table(Predicted = p2, Actual = testing$overwinter_success)
tab1
sum(diag(tab1))/sum(tab1)
plot(sort(imputedDF$Fitness))
hist(imputedDF$Fitness, breaks = 10)
library(klaR)
library(psych)
library(MASS)
library(ggord)
library(devtools)
# clean data:
ds_2022_clean <- select(ds_2022, varroa_load_mites.100.bees, nosema_load_spores.bee, FKB_percentile, UBO_assay_score, NormGenomeCopy, yard, lab_ID)
ds_2022_clean <- ds_2022_clean[!is.na(ds_2022_clean$lab_ID), ]
# aggregate mite load by sampling event and yard
modelDF <- ds_2022_clean %>% # operate on the dataframe (ds) and assign to new object
group_by(lab_ID, yard) %>% # pick variables to group by
summarise(
varroa = mean(varroa_load_mites.100.bees, na.rm=T),
nosema = mean(nosema_load_spores.bee, na.rm=T),
fkb = mean(FKB_percentile, na.rm=T),
ubo = mean(UBO_assay_score, na.rm=T),
dwv = mean(NormGenomeCopy, na.rm=T),
)
# impute missing values:
imputedDF <- na_mean(modelDF[,3:7])
# merge ds back together with ID vars
imputedDF <- cbind(imputedDF, modelDF[,1:2])
# create function to rescale
range01 <- function(x){
(x-min(x))/(max(x)-min(x))
}
# call the function on each var
varroaScaled <- range01(imputedDF$varroa)
nosemaScaled <- range01(imputedDF$nosema)
fkbScaled <- range01(imputedDF$fkb)
uboScaled <- range01(imputedDF$ubo)
dwvScaled <- range01(imputedDF$dwv)
mn <- mean(sum(nosemaScaled), sum(fkbScaled), sum(varroaScaled), sum(uboScaled), sum(dwvScaled))
varroaScaled <- (varroaScaled/sum(varroaScaled))*mn
nosemaScaled <- (nosemaScaled/sum(nosemaScaled))*mn
fkbScaled <- (fkbScaled/sum(fkbScaled))*mn
uboScaled <- (uboScaled/sum(uboScaled))*mn
dwvScaled <- (dwvScaled/sum(dwvScaled))*mn
# create histogram data set of scaled vals
histogram <- data.frame(varroaScaled, nosemaScaled, fkbScaled, uboScaled, dwvScaled)
histogramLong <- gather(histogram, condition, measurement, varroaScaled, nosemaScaled, fkbScaled, uboScaled, dwvScaled)
# plot histogram of all scaled values
ggplot(histogramLong ,aes(x=measurement, fill=condition)) +
geom_histogram(alpha = 0.5, position = "identity") +
ylab("Frequency") + # y axis label
xlab("Parameter Value") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "right") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Parameter") # color pallets option = A-H
#c(varroa=12, nosema=5, hygienic=12, honey=10, weight=8, dwv=1)
# create fitness function
Fitness = (-3 * varroaScaled) +
(-3 * nosemaScaled) +
(6 * uboScaled) +
(-3 * dwvScaled) +
(3 * fkbScaled)
# rescale 0 to 1
imputedDF$Fitness <- range01(Fitness)
# print the sorted data set
orderedDF <- imputedDF[order(imputedDF$Fitness, decreasing = TRUE),]
orderedDF
write.csv(orderedDF, "modelselectionSARE23.csv")
pcaDS <- orderedDF[!orderedDF$lab_ID==34,]
pcaDS <- select(pcaDS, overwinter_success, varroa, nosema, hygienic, honey, weight, NormGenomeCopy)
mod <- aov(pcaDS$honey~pcaDS$overwinter_success)
summary(mod)
boxplot(pcaDS$honey~pcaDS$overwinter_success)
set.seed(123)
ind <- sample(2, nrow(pcaDS),
replace = TRUE,
prob = c(0.6, 0.4))
training <- pcaDS[ind==1,]
testing <- pcaDS[ind==2,]
linear <- lda(overwinter_success~., training)
linear$scaling*1000000000000
p1 <- predict(linear, training)$class
tab <- table(Predicted = p1, Actual = training$overwinter_success)
tab
sum(diag(tab))/sum(tab)
p2 <- predict(linear, testing)$class
tab1 <- table(Predicted = p2, Actual = testing$overwinter_success)
tab1
sum(diag(tab1))/sum(tab1)
plot(sort(imputedDF$Fitness))
hist(imputedDF$Fitness, breaks = 10)
##Bar chart using only late season varroa loads to compare treatment groups
ggplot(ds_2022_samp9, aes(x=treatment_grp, y=varroa_load_mites.100.bees, color=treatment_grp)) +
geom_boxplot(size=1) +
ylab("Varroa Load") + # y axis label
xlab("Treatment Group") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("darkseagreen4","darkorange"), name="Treatment Group:")
# Plot the time series data by group (yard in this case)
# the fist line of code calls in the data set and sets the variables
ggplot(data=pltN, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Nosema Load (spores/bee)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
# ubo by virus load
ggplot(no0, aes(x=yard, y=NormGenomeCopy, color=uboChar)) +
geom_boxplot(size=1) +
ylab("DWV (genome copies/bee)") + # y axis label
xlab("Bee Yard") + # x axis label
labs(color=NULL ) +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_color_manual(values = c("blue", "slategrey")) +
scale_y_continuous(trans='log10')
vl <- lm(data = no0, logDWV ~ uboPrev * yard)
Anova(vl)
# summary of prevalence for virus by ubo and yard
prevSum <- ds_2022UBO %>% # operate on the dataframe (ds) and assign to new object (V)
group_by(uboChar, yard) %>% # pick variables to group by
summarise(
mean = mean(virusPrev, na.rm=T), # mean
N = length(virusPrev), # sample size
)
# ub0 by virus prev
ggplot(prevSum, aes(x=yard, y=mean, fill=uboChar)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("DWV Prevalence") + # y axis label
xlab("Bee Yard") + # x axis label
labs(fill=NULL ) +
theme_minimal(base_size = 17) + # size of the text and label ticks
theme(legend.position = "top") + # place the legend at the top
scale_fill_manual(values = c("blue", "slategrey"))
#### VARROA ANALYSIS
# aggregate mite load by sampling event and yard
pltV2021 <- ds_2021 %>% # operate on the dataframe (ds) and assign to new object (V)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(varroa_load_mites.100.bees, na.rm=T), # mean
SD = sd(varroa_load_mites.100.bees, na.rm=T), # standard dev.
N = length(varroa_load_mites.100.bees), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(varroa_load_mites.100.bees, na.rm=T)
)
# Plot the time series data by group (yard in this case)
# the fist line of code calls in the data set and sets the variables
ggplot(data=pltV2021, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
ds_2023 <- ds[ds$year == 2023, ]
# set directory:
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("SARE_field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
virus <- read.csv("DWV_SARE2021.csv", header = TRUE, stringsAsFactors = FALSE)
virus2022 <- read.csv("DWV_SARE2022.csv", header = TRUE, stringsAsFactors = FALSE)
# colonies that were removed
d <- ds[grepl(ds$comments, pattern = "removed from", fixed = TRUE),]
# make sure ids are unique
unique_to_remove <- unique(d$lab_ID)
# pull rows out that match these values
ds = filter(ds, !(lab_ID %in% unique_to_remove))
# this is where we split by year
ds_2021<- ds[ds$year == 2021, ]
ds_2022 <- ds[ds$year == 2022, ]
ds_2023 <- ds[ds$year == 2023, ]
# for 2022 create a column that denotes whether a colony was treated for varroa mites
# check sampling event number for future analyses
ds_2021$varroaTreated <- ifelse(ds_2021$sampling_event == 9 & ds_2021$varroa_load_mites.100.bees >= 2, "treated", "not_treated")
ds_2022$varroaTreated <- ifelse(ds_2022$sampling_event == 9 & ds_2022$varroa_load_mites.100.bees >= 2, "treated", "not_treated")
ds_2023$varroaTreated <- ifelse(ds_2023$sampling_event == 9 & ds_2023$varroa_load_mites.100.bees >= 2, "treated", "not_treated")
pltV2021 <- ds_2021 %>% # operate on the dataframe (ds) and assign to new object (V)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(varroa_load_mites.100.bees, na.rm=T), # mean
SD = sd(varroa_load_mites.100.bees, na.rm=T), # standard dev.
N = length(varroa_load_mites.100.bees), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(varroa_load_mites.100.bees, na.rm=T)
)
pltV2022 <- ds_2022 %>% # operate on the dataframe (ds) and assign to new object (V)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(varroa_load_mites.100.bees, na.rm=T), # mean
SD = sd(varroa_load_mites.100.bees, na.rm=T), # standard dev.
N = length(varroa_load_mites.100.bees), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(varroa_load_mites.100.bees, na.rm=T)
)
pltV2023 <- ds_2023 %>% # operate on the dataframe (ds) and assign to new object (V)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(varroa_load_mites.100.bees, na.rm=T), # mean
SD = sd(varroa_load_mites.100.bees, na.rm=T), # standard dev.
N = length(varroa_load_mites.100.bees), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(varroa_load_mites.100.bees, na.rm=T)
)
# Plot the time series data by group (yard in this case)
# the fist line of code calls in the data set and sets the variables
ggplot(data=pltV2021, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
ggplot(data=pltV2022, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
ggplot(data=pltV2023, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
# set directory:
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("SARE_field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
virus <- read.csv("DWV_SARE2021.csv", header = TRUE, stringsAsFactors = FALSE)
virus2022 <- read.csv("DWV_SARE2022.csv", header = TRUE, stringsAsFactors = FALSE)
virus2023 <- read.csv("Virus results 2024.csv", header = TRUE, stringsAsFactors = FALSE)
# set directory:
setwd("~/Documents/GitHub/SARE")
# set directory:
setwd("~/Documents/GitHub/SARE")
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("SARE_field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
virus <- read.csv("DWV_SARE2021.csv", header = TRUE, stringsAsFactors = FALSE)
virus2022 <- read.csv("DWV_SARE2022.csv", header = TRUE, stringsAsFactors = FALSE)
virus2023 <- read.csv("Virus_results_2024.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("/Users/sydneymiller/Documents/GitHub/SARE")
virus2023 <- read.csv("Virus_results_2024.csv", header = TRUE, stringsAsFactors = FALSE)
virus2023 <- read.csv("Virus results 2024.csv", header = TRUE, stringsAsFactors = FALSE)
View(ds)
ds2023 <- read.csv("SARE field database2023.csv", header = TRUE, stringsAsFactors = FALSE)
View(ds2023)
virus2023 <- read.csv("Virus results 2024.csv", header = TRUE, stringsAsFactors = FALSE)
merge(ds2023, virus2023, by = 'lab_ID')
View(ds2023)
View(virus2023)
virus2023 <- read.csv("Virus results 2024.csv", header = TRUE, stringsAsFactors = FALSE)
merge(ds2023, virus2023, by = 'lab_ID')
full_ds2023 <- merge(ds2023, virus2023, by = 'lab_ID')
View(full_ds2023)
full_ds2023 <- merge(virus2023, ds2023, by = 'lab_ID')
View(full_ds2023)
full_ds2023 <- merge(virus2023, ds2023, by = c('lab_ID', 'yard')
View(full_ds2023)
View(full_ds2023)
ds_2023_only <- filter(ds2023, year == 2023)
View(ds_2023_only)
full_ds2023 <- merge(virus2023, ds_2023_only, by = c('lab_ID', 'yard'))
View(full_ds2023)
full_ds2023 <- merge(virus2023, ds_2023_only, by = c('lab_ID', 'yard')) %>%
pivot_longer(
cols = full_ds2023$Copies.uL.DWV.A,
full_ds2023$Copies.uL.DWV.B,
full_ds2023$Copies.uL.BQCV,
full_ds2023$Copies.uL.IAPV,
full_ds2023$Copies.uL.SBV,
full_ds2023$Copies.uL.CBPV,
full_ds2023$Copies.uL.LSV
names_to = "virus",
full_ds2023 <- merge(virus2023, ds_2023_only, by = c('lab_ID', 'yard')) %>%
pivot_longer(
cols = full_ds2023$Copies.uL.DWV.A,
full_ds2023$Copies.uL.DWV.B,
full_ds2023$Copies.uL.BQCV,
full_ds2023$Copies.uL.IAPV,
full_ds2023$Copies.uL.SBV,
full_ds2023$Copies.uL.CBPV,
full_ds2023$Copies.uL.LSV,
names_to = "virus",
values_to = "virus_count"
)
full_ds2023 <- merge(virus2023, ds_2023_only, by = c('lab_ID', 'yard'))
full_ds_2023 %>%
pivot_longer(
cols = full_ds2023$Copies.uL.DWV.A,
full_ds2023$Copies.uL.DWV.B,
full_ds2023$Copies.uL.BQCV,
full_ds2023$Copies.uL.IAPV,
full_ds2023$Copies.uL.SBV,
full_ds2023$Copies.uL.CBPV,
full_ds2023$Copies.uL.LSV,
names_to = "virus",
values_to = "virus_count"
)
full_ds2023 %>%
pivot_longer(
cols = full_ds2023$Copies.uL.DWV.A,
full_ds2023$Copies.uL.DWV.B,
full_ds2023$Copies.uL.BQCV,
full_ds2023$Copies.uL.IAPV,
full_ds2023$Copies.uL.SBV,
full_ds2023$Copies.uL.CBPV,
full_ds2023$Copies.uL.LSV,
names_to = "virus",
values_to = "virus_count"
)
View(full_ds2023)
full_ds2023 %>%
pivot_longer(
cols = full_ds2023$Copies.uL.DWV.A,
full_ds2023$Copies.uL.DWV.B,
full_ds2023$Copies.uL.BQCV,
full_ds2023$Copies.uL.IAPV,
full_ds2023$Copies.uL.SBV,
full_ds2023$Copies.uL.CBPV,
full_ds2023$Copies.uL.LSV,
names_to = "virus",
values_to = "virus_count"
)
full_ds2023 %>%
pivot_longer(
cols =Copies.uL.DWV.A,
Copies.uL.DWV.B,
Copies.uL.BQCV,
Copies.uL.IAPV,
Copies.uL.SBV,
Copies.uL.CBPV,
Copies.uL.LSV,
names_to = "virus",
values_to = "virus_count"
)
full_ds2023 %>%
select(lab_ID, treatment_group, Copies.uL.DWV.A,
Copies.uL.DWV.B,
Copies.uL.BQCV,
Copies.uL.IAPV,
Copies.uL.SBV,
Copies.uL.CBPV,
Copies.uL.LSV)
full_ds2023 %>%
select(lab_ID, treatment_group, Copies.uL.DWV.A,
Copies.uL.DWV.B,
Copies.uL.BQCV,
Copies.uL.IAPV,
Copies.uL.SBV,
Copies.uL.CBPV,
Copies.uL.LSV) %>%
pivot_longer(cols = Copies.uL.DWV.A:Copies.uL.LSV,
names_to = "virus",
values_to = "virus_count")
full_ds2023_virus <- full_ds2023 %>%
select(lab_ID, treatment_group, Copies.uL.DWV.A,
Copies.uL.DWV.B,
Copies.uL.BQCV,
Copies.uL.IAPV,
Copies.uL.SBV,
Copies.uL.CBPV,
Copies.uL.LSV) %>%
pivot_longer(cols = Copies.uL.DWV.A:Copies.uL.LSV,
names_to = "virus",
values_to = "virus_count")
View(full_ds2023_virus)
full_ds2023_virus %>%
group_by(treatment_group)
full_ds2023_virus <- full_ds2023 %>%
select(lab_ID, treatment_group, Copies.uL.DWV.A,
Copies.uL.DWV.B,
Copies.uL.BQCV,
Copies.uL.IAPV,
Copies.uL.SBV,
Copies.uL.CBPV,
Copies.uL.LSV)
View(full_ds2023_virus)
