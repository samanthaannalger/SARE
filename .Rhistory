import platform
import platform
# make sure python 3.9 is loaded
import platform
# make sure python 3.9 is loaded
print(platform.python_version())
from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align
from spacetime.scale.rasterTrim import raster_trim
from spacetime.objects.fileObject import file_object
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.operations.time import cube_time, return_time, scale_time, select_time
from spacetime.operations.cubeToDataframe import cube_to_dataframe
import matplotlib.pyplot as plt
data = ["walkthrough_data/LULC_1995.tif", "walkthrough_data/India_cropped-area_1km_2016.tif"]
# load data
fo = read_data(data)
# let's query some attributes of this file object
fo.number_of_bands() # check number of bands
fo.extract_epsg_code() # check the epsg codes
fo.get_raster_dimensions() # check the raster dimensions
fo.pixel_size() # check pixel size
fo.get_nodata_value() # check no data values
import platform
# make sure python 3.9 is loaded
print(platform.python_version())
# set directory:
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
library(cowplot)
library(scales)
library(ggmosaic)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("UBO_Data_2022.csv", header = TRUE, stringsAsFactors = FALSE)
# UBO cont and binary
# create binary variable for UBO
ds$UBO_binary <- ifelse(ds$assay_score >= 0.6, 1, 0) #"hygienic", "nonhygienic")
mean(ds$UBO_binary, na.rm=T) # get percentage of hygienic UBO
# create anonymous beekeeper names
ds$anonBeek <- ifelse(ds$beekeeper == "Andrew Munkres", "beekeeper 1",
ifelse(ds$beekeeper == "Jack Rath", "beekeeper 2", "beekeeper 3"
))
# create nosema data frame and make long form
NosemaDS <- select(ds, beekeeper, yard, lab_ID, june_nosema_load_spores.bee, august_nosema_load_spores.bee, UBO_binary, assay_score)
NosemaDS_long <- gather(NosemaDS, time, nosmea_load, june_nosema_load_spores.bee:august_nosema_load_spores.bee, factor_key=TRUE)
NosemaDS_long$time <- ifelse(NosemaDS_long$time=="june_nosema_load_spores.bee", "June", "August")
NosemaDS_long$nosmea_load_log <- log10(NosemaDS_long$nosmea_load + 1)
NosemaDS_long$nosema_binary <- ifelse(NosemaDS_long$nosmea_load > 0, 1, 0)
NosemaDS_long$rescaledNosema <- NosemaDS_long$nosmea_load/sum(NosemaDS_long$nosmea_load, na.rm = TRUE)
NosemaDS_long$lab_ID <- as.character(NosemaDS_long$lab_ID)
# remove 0s
NosemaDS_long_no0 <- NosemaDS_long[!NosemaDS_long$nosema_binary==0,]
x=NosemaDS_long_no0[NosemaDS_long_no0$time=="August",]
x[x$UBO_binary==1,]
nosePrevSum <- NosemaDS_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosema_binary, na.rm=T), # mean
n = length(nosema_binary),
a = sum(nosema_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
# add factor data and make ubo a char
nosePrevSum <- nosePrevSum[!is.na(nosePrevSum$UBO_binary),]
nosePrevSum$time <- factor(nosePrevSum$time, levels = c("June", "August"))
nosePrevSum$UBO_Char <- ifelse(nosePrevSum$UBO_binary==1, "UBO Pos.", "UBO Neg.")
# plot prevalence
nosPrev <- ggplot(nosePrevSum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(8,8)) +
coord_cartesian(ylim = c(0, 1)) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.1, color=UBO_Char))+
labs(x="Sampling Month", y="Nosema Prevalence", color="UBO Status:") +
scale_color_manual(values = c("tomato3", "darkturquoise"))
nosemaLoad_Sum <- NosemaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(nosmea_load, na.rm=T), # mean\
n = length(nosmea_load),
sd = sd(nosmea_load, na.rm = TRUE),
se = sd / sqrt(n)
)
# add factor data and make ubo a char
nosemaLoad_Sum <- nosemaLoad_Sum[!is.na(nosemaLoad_Sum$UBO_binary),]
nosemaLoad_Sum$time <- factor(nosemaLoad_Sum$time, levels = c("June", "August"))
nosemaLoad_Sum$UBO_Char <- ifelse(nosemaLoad_Sum$UBO_binary==1, "UBO High", "UBO Low")
contNos <-ggplot(nosemaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.2,.9)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Nosema Load (spores/bee)", color=" ") +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_color_manual(values = c("tomato3", "darkturquoise"))
contNos
# make a multi panel plot
plot_grid(nosPrev, contNos,
labels = "AUTO",
label_size = 20)
#glm with gamma distribution rescaled nosema assay score by time
mod <- glmer(data = NosemaDS_long_no0, rescaledNosema ~ assay_score * time + (1 | yard/beekeeper), family = "Gamma")
mod1 <- glmer(data = NosemaDS_long, nosema_binary ~ assay_score * time + (1 | yard/beekeeper), family = binomial(link="logit"))
Anova(mod)
Anova(mod1)
#glm with gamma distribution rescaled nosema ubo binary by time
mod2 <- glmer(data = NosemaDS_long, nosema_binary ~ UBO_binary * time + (1 | yard/beekeeper), family = binomial(link="logit"))
mod3 <- glmer(data = NosemaDS_long_no0, rescaledNosema ~ UBO_binary * time + (1 | yard/beekeeper), family = "Gamma")
Anova(mod2)
Anova(mod3)
VarroaDS <- select(ds, beekeeper, yard, lab_ID, june_varroa_load_mites.100.bees, august_varroa_load_mites.100.bees, UBO_binary, assay_score)
VarroaDS_long <- gather(VarroaDS, time, varroa_load, june_varroa_load_mites.100.bees:august_varroa_load_mites.100.bees, factor_key=TRUE)
VarroaDS_long$time <- ifelse(VarroaDS_long$time=="june_varroa_load_mites.100.bees", "June", "August")
VarroaDS_long$varroa_binary <- ifelse(VarroaDS_long$varroa_load > 0, 1, 0)
VarroaDS_long$rescaledVarroa <- VarroaDS_long$varroa_load/sum(VarroaDS_long$varroa_load, na.rm = TRUE)
VarroaDS_long$lab_ID <- as.character(VarroaDS_long$lab_ID)
# remove 0s
VarroaDS_long_no0 <- VarroaDS_long[!VarroaDS_long$varroa_binary==0,]
varroaPrevSum <- VarroaDS_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(varroa_binary, na.rm=T), # mean
n = length(varroa_binary),
a = sum(varroa_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
# add factor data and make ubo a char
varroaPrevSum <- varroaPrevSum[!is.na(varroaPrevSum$UBO_binary),]
varroaPrevSum$time <- factor(varroaPrevSum$time, levels = c("June", "August"))
varroaPrevSum$UBO_Char <- ifelse(varroaPrevSum$UBO_binary==1, "UBO Pos.", "UBO Neg.")
# plot prevalence
nosPrev <- ggplot(varroaPrevSum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(8,8)) +
coord_cartesian(ylim = c(0, 1)) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.1, color=UBO_Char))+
labs(x="Sampling Month", y="Varroa Prevalence", color="UBO Status:") +
scale_color_manual(values = c("tomato3", "darkturquoise"))
nosPrev
varroaLoad_Sum <- VarroaDS_long_no0 %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(varroa_load, na.rm=T), # mean\
n = length(varroa_load),
sd = sd(varroa_load, na.rm = TRUE),
se = sd / sqrt(n)
)
# add factor data and make ubo a char
varroaLoad_Sum <- varroaLoad_Sum[!is.na(varroaLoad_Sum$UBO_binary),]
varroaLoad_Sum$time <- factor(varroaLoad_Sum$time, levels = c("June", "August"))
varroaLoad_Sum$UBO_Char <- ifelse(varroaLoad_Sum$UBO_binary==1, "UBO High", "UBO Low")
varLoad <-ggplot(varroaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.2,.9)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Date", y="Varroa Load", color=" ") +
scale_color_manual(values = c("tomato3", "darkturquoise"))
varLoad
# make a multi panel plot
plot_grid(nosPrev, varLoad,
labels = "AUTO",
label_size = 20)
varLoad <-ggplot(varroaLoad_Sum, aes(x=time, y=mean, group=UBO_Char)) +
geom_point(aes(color=UBO_Char), size=5)+
geom_line(aes(color=UBO_Char), size=1.5) +
theme_classic(base_size = 20) +
theme(legend.position = c(.2,.9)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = 0.1 ,color=UBO_Char))+
labs(x="Sampling Month", y="Varroa Load", color=" ") +
scale_color_manual(values = c("tomato3", "darkturquoise"))
varLoad
# make a multi panel plot
plot_grid(nosPrev, varLoad,
labels = "AUTO",
label_size = 20)
#glm with gamma distribution rescaled nosema assay score by time
mod <- glmer(data = VarroaDS_long_no0, rescaledVarroa ~ assay_score * time + (1 | yard/beekeeper), family = "Gamma")
mod1 <- glmer(data = VarroaDS_long, varroa_binary ~ assay_score * time + (1 | yard/beekeeper), family = binomial(link="logit"))
Anova(mod)
Anova(mod1)
#glm with gamma distribution rescaled nosema ubo binary by time
mod2 <- glmer(data = VarroaDS_long, varroa_binary ~ UBO_binary * time + (1 | yard/beekeeper), family = binomial(link="logit"))
mod3 <- glmer(data = VarroaDS_long_no0, rescaledVarroa ~ UBO_binary * time + (1 | yard/beekeeper), family = "Gamma")
Anova(mod2)
Anova(mod3)
x=merge(NosemaDS_long, VarroaDS_long)
chisq.test(x$varroa_binary, x$nosema_binary)
x %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(time, varroa_binary) %>% # pick variables to group by
summarise(
mean = mean(nosema_binary, na.rm=T), # mean
n = length(nosema_binary),
sd = sd(nosema_binary, na.rm = TRUE),
se = sd / sqrt(n)
)
