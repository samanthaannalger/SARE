slice(1)
cat_tree_full$cptable |>
# Need to convert it to a data frame to use any dplyr verbs
data.frame() %>%
filter(xerror < xcutoff) %>%
slice(1) %>%
pull(CP)
plotcp(cat_tree_full)
# Prune the tree
prune(tree = cat_tree_full,
cp = cp_prune)
cat_tree_full$cptable |>
# Need to convert it to a data frame to use any dplyr verbs
data.frame() %>%
filter(xerror < xcutoff) %>%
slice(1) %>%
pull(CP) ->
cp_prune
plotcp(cat_tree_full)
# Prune the tree
prune(tree = cat_tree_full,
cp = cp_prune)
# Prune the tree
cat_prune <-
prune(tree = cat_tree_full,
cp = cp_prune)
# Then plot it:
rpart.plot(x = cat_prune,
type = 1,
extra = 101)
# Then plot it:
rpart.plot(x = cat_prune,
type = 5, #can change type (ex. 2) to change how tree is displayed
extra = 101)
# Evaluate the model by using the test data:
# Predicting the sex of the cats of the test data using the pruned tree
predict(object = cat_prune,
newdata = data.frame(body_wt = 3,
body_wt = 10))
# Evaluate the model by using the test data:
# Predicting the sex of the cats of the test data using the pruned tree
predict(object = cat_prune,
newdata = data.frame(body_wt = 3,
heart_wt = 10))
# Evaluate the model by using the test data:
# Predicting the sex of the cats of the test data using the pruned tree
predict(object = cat_prune,
newdata = data.frame(body_wt = 3,
heart_wt = 10),
type = "class")
# Creating the confusion matrix:
confusionmatrix(data = cats_pred,
reference = cats$Sex)
# Creating the confusion matrix:
confusionMatrix(data = cats_pred,
reference = cats$Sex)
# Evaluate the model by using the test data:
# Predicting the sex of the cats of the test data using the pruned tree
predict(object = cat_prune,
newdata = data.frame(body_wt = 3, #if you leave out newdata(), it predicts for all cats in the original data set
heart_wt = 10),
type = "class") -<
# Evaluate the model by using the test data:
# Predicting the sex of the cats of the test data using the pruned tree
predict(object = cat_prune,
newdata = data.frame(body_wt = 3, #if you leave out newdata(), it predicts for all cats in the original data set
heart_wt = 10),
type = "class") ->
cats_pred
# Creating the confusion matrix:
confusionMatrix(data = cats_pred,
reference = cats$Sex)
varImp(object = cat_prune)
summary(cat_prune)
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
# load in data
#ds <- read.csv("SARE_Field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("SARE_field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
virus <- read.csv("DWV_SARE2021.csv", header = TRUE, stringsAsFactors = FALSE)
ggplot(data = ds,
mapping = aes(x = frame_of_bees))
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees))
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point() +
scale_y_continuous(breaks = c(0:10, 1) )
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point() +
scale_y_continuous(breaks = c(0:10, 5) )
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,6))
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,5))
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,4))
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,3))
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth()
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_line()
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_line(type = "smooth")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth()
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = "loess")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F)
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa ",
x = "Frames of Bees",
y = "Winter Survival")+
view(ds$varroa_load_mites.100.bees)
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa ",
x = "Frames of Bees",
y = "Winter Survival")+
view(ds$varroa_load_mites.100.bees, ds$frame_of_bees)
view(ds$varroa_load_mites.100.bees, ds$frame_of_bees)
view(ds$frame_of_bees)
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees,
na.rm = T)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa ",
x = "Frames of Bees",
y = "Winter Survival")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Frames of Bees",
y = "Winter Survival")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Frames of Bees",
y = "Varroa Load (mites/100 bees)")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)")
view(ds$varroa_load_mites.100.bees)
unique_to_remove <- unique(d$lab_ID)
# pull rows out that match these values
ds = filter(ds, !(lab_ID %in% unique_to_remove))
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)")
view(ds$varroa_load_mites.100.bees)
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se=TRUE, fullrange=TRUE) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue") +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)")
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)") +
theme_bw()
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)") +
theme_classic()
ggplot(data = ds,
mapping = aes(x = frame_of_bees,
y = varroa_load_mites.100.bees)) +
geom_point()+
scale_y_continuous(limits = c(0,2))+
geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)") +
theme_light()
ggplot(data = ds,
mapping = aes(x = yard,
y = overwinter_success)) +
geom_bar()+
#scale_y_continuous(limits = c(0,2))+
#geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)") +
theme_light()
ggplot(data = ds,
mapping = aes(x = yard,
y = overwinter_success)) +
geom_col()+
#scale_y_continuous(limits = c(0,2))+
#geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)") +
theme_light()
ds %>%
filter(overwinter_success != "dead? no record") %>%
ggplot(data = ds,
mapping = aes(x = yard,
y = overwinter_success)) +
geom_col()+
#scale_y_continuous(limits = c(0,2))+
#geom_smooth(method = lm, color = "blue", se = F) +
labs(title = "Spring Colony Size Effect on Varroa Load",
x = "Hive Frames Occupied by Bees",
y = "Varroa Load (mites/100 bees)") +
theme_light()
view(ds$overwinter_success)
ggplot(ds, aes(x = yard, fill = overwintering_success)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Game Rating",
x ="Proportion",
y ="Board Game Category") +
theme(legend.position = "bottom")
ggplot(ds, aes(x = yard, fill = overwinter_success)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Game Rating",
x ="Proportion",
y ="Board Game Category") +
theme(legend.position = "bottom")
ds %>%
filter(overwinter_success != "dead? no record") %>%
ggplot(ds, aes(x = yard, fill = overwinter_success)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Game Rating",
x ="Proportion",
y ="Board Game Category") +
theme(legend.position = "bottom")
ds %>%
filter(overwinter_success != "dead? no record") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Game Rating",
x ="Proportion",
y ="Board Game Category") +
theme(legend.position = "bottom")
view(ds$overwinter_success)
ds %>%
filter(overwinter_success != "dead? no record") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Game Rating",
x ="Proportion",
y ="Board Game Category") +
theme(legend.position = "bottom")
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Game Rating",
x ="Proportion",
y ="Board Game Category") +
theme(legend.position = "bottom")
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Game Rating",
x ="Apiary",
y ="Overwintering Success")
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success")
theme(legend.position = "bottom")
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success") +
theme(legend.position = "bottom")
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success") +
#theme(legend.position = "bottom")
view(ds$overwinter_success)
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success")
theme(fill = "red, "blue"")
theme(fill = "red", "blue")
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success") +
theme(fill = "red", "blue")
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill", fill = c("red", "blue")) +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success") +
theme(fill = "red", "blue")
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success") +
scale_color_viridis()
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success") +
scale_fill_manual(values = c("alive" = "#1b98e0",
"dead" = "red"))
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success") +
scale_fill_manual(values = c("alive" = "blue3",
"dead" = "red3"))
ds %>%
filter(overwinter_success == "dead" | overwinter_success == "alive") %>%
ggplot(ds, mapping = aes(x = yard, fill = overwinter_success, na.rm = T)) +
geom_bar(position = "fill") +
ylab("proportion") +
scale_y_continuous(labels = scales::percent) +
labs(fill ="Survival",
x ="Apiary",
y ="Overwintering Success") +
scale_fill_manual(values = c("alive" = "blue3",
"dead" = "red3")) +
theme_light()
