View(pest_Results)
# Read in Cornell Dataset
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
View(pest_Results)
View(pest_Results)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."]
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
View(pest_Results)
View(pest_Results)
pest_Results[pest_Results == "Large Scale",]
pest_Results[pest_Results == "Large Scale"]
pest_Results[,pest_Results == "Large Scale"]
pest_Results[pest_Results == "Large Scale",]
pest_Results[is.element(pest_Results, "Large Scale"),]
View(pest_Results)
pest_Results[is.element(pest_Result$Client.ID2, "Large Scale"),]
pest_Results[is.element(pest_Results$Client.ID2, "Large Scale"),]
which(pest_Results == "Large Scale", arr.ind=TRUE)
which(pest_Results == "Large Scale", arr.ind=TRUE)[0]
which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_row
bottom_row <- which(pest_Results == "Results are in", arr.ind=TRUE)[1]
bottom_row
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
bottom_row
pest_Results[1:LS_row,]
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
pest_Results[1:LS_row,]
LS_row
pest_Results[1:LS_row,]
x <- pest_Results[1:LS_row,]
View(x)
x <- pest_Results[1:(LS_row-1),]
View(x)
fileName <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
fileNam
fileName
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
SS_df <- pest_Results[SS_filename_row:(SS_row-1),]
View(SS_df)
SS_df <- pest_Results[SS_filename_row+1:(SS_row-1),]
View(SS_df)
View(SS_df)
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
View(SS_df)
rbind(LS_df, SS_df)
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
rbind(LS_df, SS_df)
x <- rbind(LS_df, SS_df)
View(x)
pest_df <- rbind(LS_df, SS_df)
ifelsasfasd
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
View(pest_df)
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
View(pest_df)
ifelse(pest_df$Mass..g. < 1, "small", "large")
# append dataframes
pest_df <- rbind(LS_df, SS_df)
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
View(pest_df)
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
LS_lookup
View(LS_lookup)
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
View(SS_lookup)
View(LS_lookup)
which(pest_Results == "<LOQ", arr.ind=TRUE)
loqVals <- which(pest_Results == "<LOQ", arr.ind=TRUE)
loqVals
loqVals <- data.frame(which(pest_Results == "<LOQ", arr.ind=TRUE))
loqVals
loqVals$row
pest_Results$Mass..g.[loqVals$row]
LS_lookup[0,]
LS_lookup[1,]
LS_lookup[1,loqVals$col]
loqVals$col
mass <- pest_Results$Mass..g.[loqVals$row]
lod <- LS_lookup[1,loqVals$col]
lod/mass
mass
mass <- as.numeric(pest_Results$Mass..g.[loqVals$row])
lod <- LS_lookup[1,loqVals$col]
lod/mass
LS_lookup[1,loqVals$col]
lod <- as.numeric(LS_lookup[1,loqVals$col])
lod
lod/mass
loqVals <- data.frame(which(pest_df == "<LOQ", arr.ind=TRUE))
loqVals
mass <- as.numeric(pest_df$Mass..g.[loqVals$row])
lod <- as.numeric(LS_lookup[1,loqVals$col])
results <- lod/mass
results
pest_df[loqVals]
pest_df[loqVals$row, loqVals$col]
pest_Results[pest_df == "<LOQ"] <- results
pest_Results[pest_df == "<LOQ"]
which(pest_df == "<LOQ", arr.ind=TRUE) <- results
pest_df
pest_df[2,4]
[loqVals$row,loqVals$col]
[loqVals$row,loqVals$col]]
loqVals$row,loqVals$col
pest_df[loqVals$row,loqVals$col]
pest_df[loqVals$row,loqVals$col] <- results
for(i in range(len(results))){
print("hello")
}
for(i in range(length(results))){
print("hello")
}
for(i in range(results)){
print("hello")
}
for(i in 1:range(results)){
print("hello")
}
for(i in 1:range(len(results))){
print("hello")
}
for(i in 1:range(length(results))){
print("hello")
}
for(i in 1:length(results)){
print("hello")
}
length(results)
for(i in 1:length(results)){
print(i)
}
for(i in 1:length(results)){
print(results[i])
}
for(i in 1:length(results)){
print(pest_df[loqVals$row[i], loqVals$col[i]])
}
for(i in 1:length(results)){
pest_df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
View(pest_df)
#################################################################
# find where samples say >uloq
uloqVals <- data.frame(which(pest_df == ">ULOQ", arr.ind=TRUE))
uloqVals
# pull out mass and lod and do out the division
mass <- as.numeric(pest_df$Mass..g.[uloqVals$row])
uloq <- as.numeric(LS_lookup[1,uloqVals$col])
results1 <- uloq/mass
results1
LS_lookup
#################################################################
# find where samples say >uloq
uloqVals <- data.frame(which(pest_df == ">ULOQ", arr.ind=TRUE))
# pull out mass and lod and do out the division
mass <- as.numeric(pest_df$Mass..g.[uloqVals$row])
uloq <- as.numeric(LS_lookup[3,uloqVals$col])
results1 <- uloq/mass
# assign results to index where loq was found
for(i in 1:length(results1)){
pest_df[uloqVals$row[i], uloqVals$col[i]] <- results1[i]
}
results1
limit_finder <- function(df, search, lookup){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
lod <- as.numeric(lookup[1,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
return(df)
}
limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
x <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
x <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
View(x)
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
# Read in Cornell Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
limit_finder <- function(df, search, lookup){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
lod <- as.numeric(lookup[1,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
SS_df
data.frame(which(SS_df == ">ULOQ", arr.ind=TRUE))
x <- data.frame(which(SS_df == ">ULOQ", arr.ind=TRUE))
x$row
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
print(length(loqVals))
# pull out mass and lod and do out the division
#mass <- as.numeric(df$Mass..g.[loqVals$row])
#lod <- as.numeric(lookup[1,loqVals$col])
#results <- lod/mass
# assign results to index where loq was found
#for(i in 1:length(results)){
#  df[loqVals$row[i], loqVals$col[i]] <- results[i]
#}
return(df)
}
# !NOTE! Writre
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
print(length(loqVals$row))
# pull out mass and lod and do out the division
#mass <- as.numeric(df$Mass..g.[loqVals$row])
#lod <- as.numeric(lookup[1,loqVals$col])
#results <- lod/mass
# assign results to index where loq was found
#for(i in 1:length(results)){
#  df[loqVals$row[i], loqVals$col[i]] <- results[i]
#}
return(df)
}
# !NOTE! Writre
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
# Read in Cornell Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
print(length(loqVals$row))
# pull out mass and lod and do out the division
#mass <- as.numeric(df$Mass..g.[loqVals$row])
#lod <- as.numeric(lookup[1,loqVals$col])
#results <- lod/mass
# assign results to index where loq was found
#for(i in 1:length(results)){
#  df[loqVals$row[i], loqVals$col[i]] <- results[i]
#}
return(df)
}
# !NOTE! Writre
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
# Read in Cornell Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
lod <- as.numeric(lookup[1,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
View(LS_df)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
View(LS_df)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
View(SS_df)
# Read in Cornell Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(scale=="large", 1, 3) # convert scale into row index
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup, scale = "large")
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup, scale = "small")
View(LS_df)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup, scale = "large")
View(loqVals)
View(LS_df)
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(scale=="large", 1, 3) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup, scale = "large")
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup, scale = "small")
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup, scale = "large")
# Read in Cornell Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(scale=="large", 1, 3) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup, scale = "large")
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup, scale = "small")
# Read in Cornell Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
########################################################################
# LIMIT FINDER FUNCTION
########################################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
View(LS_df)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
# append dataframes
pest_df <- rbind(LS_df, SS_df)
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
pest_df
View(pest_df)
str(pest_df)
