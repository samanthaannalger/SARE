parameters <- c(
beta_c = 0.001,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.001,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# starting conditions
init <- c(P_s = 100000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.1,
gamma = 0.001,
alpha = 0.001,
theta = 0.001,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
plot(out$G)
matplot(x = times, y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 3)
# parameters
parameters <- c(
beta_c = 0.1,
beta_n = 0.1,
gamma = 0.001,
alpha = 0.001,
theta = 0.1,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.05,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# starting conditions
init <- c(P_s = 10000000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.05,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.05,
b_s = 0.001
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.01,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
## Create an SIR function
ranaMod <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -(beta_c * P_s) - (beta_n * P_s) - (theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
dI <- ((beta_c * P_s) + (beta_n * P_s) + (theta * W * P_s)) - (d_i * P_i)
dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
dG <- (mu * W * (N_g - G)) - (sigma_g * G)
return(list(c(dS, dI, dW, dG)))
})
}
# starting conditions
init <- c(P_s = 10000000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.01,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
plot(out$P_s)
# parameters
parameters <- c(
beta_c = 0.1,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# starting conditions
init <- c(P_s = 1000000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
## Create an SIR function
ranaMod <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -(theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
dI <- (theta * W * P_s) - (d_i * P_i)
dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
dG <- (mu * W * (N_g - G)) - (sigma_g * G)
#dS <- -(beta_c * P_s) - (beta_n * P_s) - (theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
#dI <- ((beta_c * P_s) + (beta_n * P_s) + (theta * W * P_s)) - (d_i * P_i)
#dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
#dG <- (mu * W * (N_g - G)) - (sigma_g * G)
return(list(c(dS, dI, dW, dG)))
})
}
# starting conditions
init <- c(P_s = 1000000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# starting conditions
init <- c(P_s = 1000000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 100,
N_w = 100,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
matplot(x = times, y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
matplot(y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.001,
N_g = 100,
N_w = 100,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# set directory:
setwd("~/Documents/GitHub/SARE")
# install libraries
library(dplyr)
library(ggplot2)
library(lme4)
library(tidyr)
library(viridis)
library(car)
library(imputeTS)
# load in data
#ds <- read.csv("SARE_Field_database.csv", header = TRUE, stringsAsFactors = FALSE)
ds <- read.csv("SARE_field_database2022.csv", header = TRUE, stringsAsFactors = FALSE)
virus <- read.csv("DWV_SARE2021.csv", header = TRUE, stringsAsFactors = FALSE)
# colonies that were removed
d <- ds[grepl(ds$comments, pattern = "removed from", fixed = TRUE),]
# make sure ids are unique
unique_to_remove <- unique(d$lab_ID)
# pull rows out that match these values
ds = filter(ds, !(lab_ID %in% unique_to_remove))
#### VARROA ANALYSIS
# aggregate mite load by sampling event and yard
pltV <- ds %>% # operate on the dataframe (ds) and assign to new object (V)
group_by(sampling_event, yard) %>% # pick variables to group by
summarise(
mean = mean(varroa_load_mites.100.bees, na.rm=T), # mean
SD = sd(varroa_load_mites.100.bees, na.rm=T), # standard dev.
N = length(varroa_load_mites.100.bees), # sample size
SE = SD/sqrt(N),                   # standard error
MAX = max(varroa_load_mites.100.bees, na.rm=T)
)
# Plot the time series data by group (yard in this case)
# the fist line of code calls in the data set and sets the variables
ggplot(data=pltV, aes(x=sampling_event, y=mean, group=yard, color=yard)) +
ylab("Varroa Load (mites/100 bees)") + # y axis label
xlab("Sampling Event") + # x axis label
theme_minimal(base_size = 17) + # size of the text and label ticks
geom_line(size=1.5) + # create lines and set thickness
geom_point(size=4, shape=18) + # create points and set size and shape
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2) + # add standard errors
theme(legend.position = "top") + # place the legend at the top
scale_color_viridis(discrete = TRUE, option="H", name="Yard:") # color pallets option = A-H
